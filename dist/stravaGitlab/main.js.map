{"version":3,"sources":["webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/classes/annualStats.ts","webpack:///./src/app/classes/configStrava.ts","webpack:///./src/app/classes/lastActivityPreview.ts","webpack:///./src/app/classes/tendance.ts","webpack:///./src/app/components/activities-list/activities-list-datasource.ts","webpack:///./src/app/components/activities-list/activities-list.component.html","webpack:///./src/app/components/activities-list/activities-list.component.scss","webpack:///./src/app/components/activities-list/activities-list.component.ts","webpack:///./src/app/components/dashboard/dashboard.component.html","webpack:///./src/app/components/dashboard/dashboard.component.scss","webpack:///./src/app/components/dashboard/dashboard.component.ts","webpack:///./src/app/components/last-activity-preview/last-activity-preview.component.html","webpack:///./src/app/components/last-activity-preview/last-activity-preview.component.scss","webpack:///./src/app/components/last-activity-preview/last-activity-preview.component.ts","webpack:///./src/app/configuration/constants.ts","webpack:///./src/app/configuration/timeMethods.ts","webpack:///./src/app/configuration/urlsStrava.ts","webpack:///./src/app/configuration/utils.ts","webpack:///./src/app/interfacesStrava/activityType.ts","webpack:///./src/app/interfacesStrava/activityZone.ts","webpack:///./src/app/interfacesStrava/altitudeStream.ts","webpack:///./src/app/interfacesStrava/baseStream.ts","webpack:///./src/app/interfacesStrava/cadenceStream.ts","webpack:///./src/app/interfacesStrava/detailedAthlete.ts","webpack:///./src/app/interfacesStrava/detailedClub.ts","webpack:///./src/app/interfacesStrava/detailedSegment.ts","webpack:///./src/app/interfacesStrava/distanceStream.ts","webpack:///./src/app/interfacesStrava/explorerSegment.ts","webpack:///./src/app/interfacesStrava/heartrateStream.ts","webpack:///./src/app/interfacesStrava/latLngStream.ts","webpack:///./src/app/interfacesStrava/models.ts","webpack:///./src/app/interfacesStrava/movingStream.ts","webpack:///./src/app/interfacesStrava/powerStream.ts","webpack:///./src/app/interfacesStrava/runningRace.ts","webpack:///./src/app/interfacesStrava/segmentLeaderboard.ts","webpack:///./src/app/interfacesStrava/smoothGradeStream.ts","webpack:///./src/app/interfacesStrava/smoothVelocityStream.ts","webpack:///./src/app/interfacesStrava/summaryAthlete.ts","webpack:///./src/app/interfacesStrava/summaryClub.ts","webpack:///./src/app/interfacesStrava/summarySegment.ts","webpack:///./src/app/interfacesStrava/temperatureStream.ts","webpack:///./src/app/interfacesStrava/timeStream.ts","webpack:///./src/app/modules/app-routing.module.ts","webpack:///./src/app/modules/material.ts","webpack:///./src/app/services/activities.service.ts","webpack:///./src/app/services/athletes.service.ts","webpack:///./src/app/services/oauth2.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"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","file":"main.js","sourcesContent":["var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<span *ngIf='!isToolbarShowable'>\\n    <mat-toolbar class='mat-elevation-z10'>\\n        <a href=\\\"http://www.strava.com\\\"><img src='assets/compatible_strava_vertical.png' height=100%></a>\\n        <span *ngIf='isConnected'>\\n            <div class=\\\"center\\\">\\n                <a class='toolbar_item background' routerLink=\\\"/dashboard\\\" routerLinkActive=\\\"active\\\">Dashboard</a>\\n            </div>\\n        </span>\\n        <span class=\\\"spacer\\\"></span>\\n        <span class=\\\"right\\\" >        \\n            <span *ngIf=\\\"!isConnected\\\">\\n            <img src=\\\"assets/btn_connect_with_strava.png\\\" (click)=\\\"stravaConnection()\\\">\\n            </span> \\n            <span *ngIf=\\\"isConnected\\\">\\n            <mat-menu #menu=\\\"matMenu\\\">\\n                <a mat-menu-item class='text-orange background' routerLink=\\\"/activitiesList\\\" routerLinkActive=\\\"active\\\">Liste des activités</a>\\n                <button (click)='stravaDisconnect()' mat-menu-item class='text-orange background'>Révoquer l'accès au compte</button>            \\n            </mat-menu>\\n            <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" style='margin-right: 15px;'>\\n                <mat-icon color='warn' >keyboard_arrow_down</mat-icon>\\n                <img mat-card-avatar [src]='userConnected.profile_medium'>\\n            </button>\\n            </span> \\n        </span>\\n    </mat-toolbar>\\n</span>\\n<div style=\\\"margin-top: 70px;\\\">\\n    <router-outlet></router-outlet>\\n</div>\"","module.exports = \".sidenav-container {\\n  height: 100%; }\\n\\n.sidenav {\\n  width: 200px; }\\n\\n.sidenav .mat-toolbar {\\n  background: inherit; }\\n\\n.mat-toolbar {\\n  position: fixed;\\n  top: 0;\\n  z-index: 9999; }\\n\\n.toolbar_item {\\n  color: #fc4c02;\\n  cursor: pointer;\\n  text-decoration: none;\\n  top: 50%; }\\n\\n.spacer {\\n  flex: 1 1 auto; }\\n\\n.right {\\n  float: right; }\\n\\n.right-item {\\n  padding: 14px 16px; }\\n\\n.right-item a {\\n  text-decoration: none; }\\n\\n.center {\\n  float: none;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  -webkit-transform: translate(-50%, -50%);\\n          transform: translate(-50%, -50%); }\\n\\n.text-orange:hover {\\n  cursor: pointer; }\\n\\n.text-orange {\\n  color: #fc4c02; }\\n\\nimg:hover {\\n  cursor: pointer; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pvam8vRG9jdW1lbnRzL0RldmVsb3BwZW1lbnQvUHJvamV0c1dlYi9zdHJhdmFBbmFseXRpY3Mvc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFZLEVBQ2I7O0FBRUQ7RUFDRSxhQUFZLEVBQ2I7O0FBRUQ7RUFDRSxvQkFBbUIsRUFDcEI7O0FBRUQ7RUFDRSxnQkFBZTtFQUNmLE9BQU07RUFDTixjQUFhLEVBQ2Q7O0FBRUQ7RUFDRSxlQUFjO0VBQ2QsZ0JBQWU7RUFDZixzQkFBcUI7RUFDckIsU0FBUSxFQUNUOztBQUVEO0VBQ0UsZUFBYyxFQUNmOztBQUVEO0VBQ0UsYUFBWSxFQUNiOztBQUVEO0VBQ0UsbUJBQWtCLEVBQ25COztBQUVEO0VBQ0Usc0JBQXFCLEVBQ3RCOztBQUVEO0VBQ0UsWUFBVztFQUNYLG1CQUFrQjtFQUNsQixTQUFRO0VBQ1IsVUFBUztFQUNULHlDQUFnQztVQUFoQyxpQ0FBZ0MsRUFDakM7O0FBRUQ7RUFDRSxnQkFBZSxFQUNoQjs7QUFFRDtFQUNFLGVBQWMsRUFDZjs7QUFFRDtFQUNFLGdCQUFlLEVBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNpZGVuYXYtY29udGFpbmVyIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbiAgXG4gIC5zaWRlbmF2IHtcbiAgICB3aWR0aDogMjAwcHg7XG4gIH1cbiAgXG4gIC5zaWRlbmF2IC5tYXQtdG9vbGJhciB7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgfVxuICBcbiAgLm1hdC10b29sYmFyIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHotaW5kZXg6IDk5OTk7XG4gIH1cbiAgXG4gIC50b29sYmFyX2l0ZW17XG4gICAgY29sb3I6ICNmYzRjMDI7ICAgIFxuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgdG9wOiA1MCU7XG4gIH1cbiAgXG4gIC5zcGFjZXJ7XG4gICAgZmxleDogMSAxIGF1dG87XG4gIH1cbiAgXG4gIC5yaWdodHtcbiAgICBmbG9hdDogcmlnaHQ7XG4gIH1cbiAgXG4gIC5yaWdodC1pdGVte1xuICAgIHBhZGRpbmc6IDE0cHggMTZweDtcbiAgfVxuICBcbiAgLnJpZ2h0LWl0ZW0gYXtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IFxuICB9XG4gIFxuICAuY2VudGVye1xuICAgIGZsb2F0OiBub25lO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTsgXG4gICAgbGVmdDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICB9XG4gIFxuICAudGV4dC1vcmFuZ2U6aG92ZXJ7XG4gICAgY3Vyc29yOiBwb2ludGVyOyAgXG4gIH1cbiAgXG4gIC50ZXh0LW9yYW5nZXtcbiAgICBjb2xvcjogI2ZjNGMwMjtcbiAgfVxuICBcbiAgaW1nOmhvdmVye1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfSJdfQ== */\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Oauth2Service } from 'src/app/services/oauth2.service';\nimport { UtilsMethods } from 'src/app/configuration/utils';\nimport { AthletesService } from 'src/app/services/athletes.service';\nimport { SummaryAthlete, SummaryAthleteClass } from 'src/app/interfacesStrava/models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Configuration } from './classes/configStrava';\nimport { Observable } from 'rxjs';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']   \n})\nexport class AppComponent implements OnInit{\n\n  // valeur de connexion\n  isConnected  : boolean        = false;\n  userConnected: SummaryAthlete = new SummaryAthleteClass();\n  config       : Configuration;\n\n  isMobileLandscape : Observable<boolean> = this.breakpointObserver.observe(Breakpoints.HandsetLandscape)\n  .pipe(\n    map(result => result.matches)\n  )\n  isToolbarShowable : boolean\n\n  constructor(\n    private oauthService      : Oauth2Service,\n    private athleteService    : AthletesService,\n    private router            : Router,\n    private route             : ActivatedRoute,\n    private breakpointObserver: BreakpointObserver\n  ) \n  {}\n\n  ngOnInit(){\n\n    this.isMobileLandscape.subscribe(p_boo=>{\n      this.isToolbarShowable = p_boo;\n    })\n    // Récupération de la Configuration dans le service\n    this.config = this.oauthService.getConfiguration();\n    // Récupération du code si l'on vient de s'authentifier\n    this.route.queryParamMap.subscribe(paramMap =>{\n      if (paramMap.get('code')){\n        this.config.code = paramMap.get('code')        \n        this.oauthService.setCode(this.config.code)\n        this.oauthService.obtainAccessToken().subscribe(conf=>{\n          this.router.navigate([`/dashboard`]);\n        }); \n      }\n    })\n\n    // Pour surveiller les changements de connexion\n    this.oauthService.isConnectedSubject.subscribe(p_boo=>{\n      this.isConnected=p_boo;\n      if (this.isConnected){\n        this.athleteService.getLoggedInAthlete().subscribe(p_data=>{\n          if (p_data){\n            this.userConnected = p_data;    \n          }\n        })\n      }\n    })\n\n    // Pour obtenir un nouveau token\n    this.oauthService.manageTokens().subscribe(conf=>{\n      \n      if (conf.accessToken && !UtilsMethods.isAccessTokenExpired(conf.expires_at)){\n        console.log('Token en mémoire valide : ' + conf.accessToken)\n      }\n    });\n  }\n\n  stravaConnection(){\n    this.oauthService.authenticate();\n  }\n\n  stravaDisconnect(){\n    this.oauthService.revokAccountAccess().subscribe(p_val=>{\n      if (p_val){\n        console.log('Component OK');\n        this.router.navigate([`/`]);\n      }\n    })\n  }\n\n  ngOnDestroy(){\n    this.oauthService.isConnectedSubject.unsubscribe();\n  }\n\n}\n","// Components\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { LastActivityPreviewComponent } from './components/last-activity-preview/last-activity-preview.component';\nimport { ActivitiesListComponent } from './components/activities-list/activities-list.component';\n// Services\nimport { AthletesService } from './services/athletes.service'\nimport { Oauth2Service } from './services/oauth2.service'\nimport { Configuration } from './classes/configStrava'\nimport { ActivitiesService } from './services/activities.service';\n// Modules\nimport { AppRoutingModule } from './modules/app-routing.module';\nimport { materialModule } from './modules/material'\n// Autres\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule, HttpClient } from '@angular/common/http'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatGridListModule, MatCardModule, MatMenuModule, MatIconModule, MatButtonModule, MatTableModule, MatPaginatorModule, MatSortModule } from '@angular/material';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent, \n    LastActivityPreviewComponent, \n    ActivitiesListComponent\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserModule,\n    HttpClientModule, \n    ReactiveFormsModule, \n    BrowserAnimationsModule,\n    materialModule,\n    LayoutModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule\n  ],\n  providers: [\n    HttpClient,\n    Configuration,\n    Oauth2Service,\n    AthletesService,\n    ActivitiesService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// Interface correspondante\nexport interface AnnualStatsInterface {\n    totalDistance: number[]      // Distance totale en kilomètres\n    totalTime    : number[]      // Temps total couru\n    totalRuns    : number[]      // Nombre de courses\n    averageSpeed : number[]      // Vitesse moyenne\n    totalSeconds : number[]      // Nombre total de secondes\n    totalMeters  : number[]      // Nombre total de mètres\n}\n\n// Classe représentant les statistiques annuelles\nexport class AnnualStatsClass {\n    totalDistance: number[]      // Distance totale en kilomètres\n    totalTime    : number[]        // Temps total couru\n    totalRuns    : number[]      // Nombre de courses\n    averageSpeed : number[]      // Vitesse moyenne\n    totalSeconds : number[]      // Nombre total de secondes\n    totalMeters  : number[]      // Nombre total de mètres\n\n    constructor(){\n        this.totalDistance = [];\n        this.totalTime     = [];\n        this.totalRuns     = [];\n        this.averageSpeed  = [];\n        this.totalSeconds  = [];\n        this.totalMeters  = [];\n    }\n}","import { Constants } from '../configuration/constants'\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\nexport interface ConfigurationParameters {\n    apiKeys?        : {[ key       :  string ]: string};\n    username?       : string;\n    client_id?      : number;\n    client_secret?  : string;\n    redirect_uri?   : string;\n    response_type?  : string;\n    approval_prompt?: string;\n    scope?          : string;\n    code?           : string;\n    grant_type?     : string;\n    refresh_token?  : string;\n    password?       : string;\n    accessToken?    : string | (() => string);\n    basePath?       : string;\n    withCredentials?: boolean;\n    expires_at?     : number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class Configuration {\n    apiKeys?        : {[ key       :  string ]: string};\n    username?       : string;\n    client_id?      : number;\n    client_secret?  : string;\n    redirect_uri?   : string;\n    response_type?  : string;\n    approval_prompt?: string;\n    scope?          : string;\n    code?           : string;\n    grant_type?     : string;\n    refresh_token?  : string;\n    password?       : string;\n    accessToken?    : string | (() => string);\n    basePath?       : string;\n    withCredentials?: boolean;\n    expires_at?     : number;\n\n    constructor(\n        // configurationParameters: ConfigurationParameters = {}\n    ){        \n        // this.apiKeys = configurationParameters.apiKeys;\n        // this.username = configurationParameters.username;\n        // this.password = configurationParameters.password;\n        // this.accessToken = configurationParameters.accessToken;\n        // this.basePath = configurationParameters.basePath;\n        // this.withCredentials = configurationParameters.withCredentials;\n        this.loadConfigFromLocalStorage();\n        this.initDefaultValues();\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} contentTypes - the array of content types that are available for selection\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} accepts - the array of content types that are available for selection.\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param {string} mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return {boolean} True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    // Sauvegarde les informations vitales de la config dans les cookies\n    saveConfigToLocalStorage(){\n        this.saveAccessTokenToLocalStorage();\n        // this.saveClientIdToLocalStorage();\n        // this.saveClientSecretToLocalStorage();\n        this.saveRefreshTokenToLocalStorage();\n        // this.saveCodeToLocalStorage();\n        this.saveExpiresAtToLocalStorage();\n    }\n\n    // Charge les informations de la config depuis les cookies\n    loadConfigFromLocalStorage(): Observable<boolean>{\n        this.loadAccessTokenFromLocalStorage();\n        // this.loadClientIdFromLocalStorage();\n        // this.loadClientSecretFromLocalStorage();\n        this.loadRefreshTokenFromLocalStorage();\n        // this.loadCodeFromLocalStorage();\n        this.loadExpiresAtFromLocalStorage();\n        return new Observable<boolean>(observer=>{\n            observer.next(true);\n        })\n    }\n\n    // Affecte des valeurs par défaut à la configuration\n    initDefaultValues(){\n        // Adresse de redirection\n        if (!this.redirect_uri){\n            this.redirect_uri = Constants.REDIRECT_URI_DEFAULT;\n        }\n        // ID client\n        if (!this.client_id){\n            this.client_id = Constants.CLIENT_ID_DEFAULT;\n        }\n        // response_type\n        if (!this.response_type){\n            this.response_type = Constants.RESPONSE_TYPE_DEFAULT;\n        }\n        // apporval_prompt\n        if (!this.approval_prompt){\n            this.approval_prompt = Constants.APPROVAL_PROMPT_DEFAULT;\n        }\n        // scope\n        if (!this.scope){\n            this.scope = Constants.SCOPE_DEFAULT;\n        }\n        // client secret\n        if (!this.client_secret){\n            this.client_secret = Constants.CLIENT_SECRET_DEFAULT;\n        }\n    }\n\n    // // Enregistre le client_id dans le local storage\n    // saveClientIdToLocalStorage(p_value?: number){\n    //     if (p_value){\n    //         localStorage.setItem(Constants.CLIENT_ID_COOKIE, p_value.toString());\n    //         this.client_id = p_value;\n    //     }\n    //     else{\n    //         if (this.client_id) \n    //             localStorage.setItem(Constants.CLIENT_ID_COOKIE, this.client_id.toString());\n    //     }\n    // }\n\n    // // charge le client_id depuis le local storage\n    // loadClientIdFromLocalStorage(){\n    //     let tempValue = localStorage.getItem(Constants.CLIENT_ID_COOKIE);\n    //     if (tempValue)\n    //         this.client_id = +tempValue;\n    // }\n\n    // // Enregistre le client_secret dans le local storage\n    // saveClientSecretToLocalStorage(p_value?: string){\n    //     if (p_value){\n    //         localStorage.setItem(Constants.CLIENT_SECRET_COOKIE, p_value);\n    //         this.client_secret = p_value;\n    //     }\n    //     else{\n    //         if (this.client_secret) \n    //             localStorage.setItem(Constants.CLIENT_SECRET_COOKIE, this.client_secret);\n    //     }\n    // }\n\n    // // charge le client_secret depuis le local storage\n    // loadClientSecretFromLocalStorage(){\n    //     let tempValue = localStorage.getItem(Constants.CLIENT_SECRET_COOKIE);\n    //     if (tempValue)\n    //         this.client_secret = tempValue;\n    // }\n\n    // Enregistre le access token dans le local storage\n    saveAccessTokenToLocalStorage(p_value?: string){\n        if (p_value){\n            localStorage.setItem(Constants.ACCESS_TOKEN_COOKIE, p_value);\n            this.accessToken = p_value;\n        }\n        else{\n            if (this.accessToken) \n                localStorage.setItem(Constants.ACCESS_TOKEN_COOKIE, this.accessToken.toString());\n        }\n    }\n\n    // charge le access_token depuis le local storage\n    loadAccessTokenFromLocalStorage(){\n        let tempValue = localStorage.getItem(Constants.ACCESS_TOKEN_COOKIE);\n        if (tempValue)\n            this.accessToken = tempValue;\n    }\n\n    // Enregistre le refresh token dans le local storage\n    saveRefreshTokenToLocalStorage(p_value?: string){        \n        if (p_value){\n            localStorage.setItem(Constants.REFRESH_TOKEN_COOKIE, p_value);\n            this.refresh_token = p_value;\n        }\n        else{\n            if (this.refresh_token) \n                localStorage.setItem(Constants.REFRESH_TOKEN_COOKIE, this.refresh_token);\n        }\n    }\n\n    // charge le refresh_token depuis le local storage\n    loadRefreshTokenFromLocalStorage(){\n        let tempValue = localStorage.getItem(Constants.REFRESH_TOKEN_COOKIE);\n        if (tempValue)\n            this.refresh_token = tempValue;\n    }\n\n    // // Enregistre le refresh token dans le local storage\n    // saveCodeToLocalStorage(p_value?: string){        \n    //     if (p_value){\n    //         localStorage.setItem(Constants.CODE_COOKIE, p_value);\n    //         this.code = p_value;\n    //     }\n    //     else{\n    //         if (this.code) \n    //             localStorage.setItem(Constants.CODE_COOKIE, this.code);\n    //     }\n    // }\n\n    // // charge le refresh_token depuis le local storage\n    // loadCodeFromLocalStorage(){\n    //     let tempValue = localStorage.getItem(Constants.CODE_COOKIE);\n    //     if (tempValue)\n    //         this.code = tempValue;\n    // }\n\n    // Enregistre la date d'expiration du token\n    saveExpiresAtToLocalStorage(p_value?: number){        \n        if (p_value){\n            localStorage.setItem(Constants.EXPIRES_AT_COOKIE, p_value.toString());\n            this.expires_at = p_value;\n        }\n        else{\n            if (this.expires_at) \n                localStorage.setItem(Constants.EXPIRES_AT_COOKIE, this.expires_at.toString());\n        }\n    }\n\n    // charge la date d'expiration du token\n    loadExpiresAtFromLocalStorage(){\n        let tempValue = localStorage.getItem(Constants.EXPIRES_AT_COOKIE);\n        if (tempValue)\n            this.expires_at = parseInt(tempValue);\n    }\n}\n","import { PolylineMap, DetailedAthlete } from '../interfacesStrava/models';\n\nexport interface lastActivityInterface{\n    activityId    : number\n    activityName  : string\n    startDate     : Date\n    map           : PolylineMap\n    duration      : number       // temps de la course en secondes\n    averageSpeed  : number       // allure, en min/km\n    distance      : number       // distance en metres\n    calories      : number       // Calories brulées durant l'activité\n    startLongitude: number[]\n}\n\nexport class lastActivityClass{\n    activityId    : number\n    activityName  : string\n    startDate     : Date\n    map           : PolylineMap\n    duration      : number       // temps de la course en secondes\n    averageSpeed  : number       // allure, en min/km\n    distance      : number       // distance en metres\n    calories      : number       // Calories brulées durant l'activité\n    startLongitude: number[] = []\n}","export interface tendance{\n    time    : number\n    distance: number\n    averageSpeed : number\n}\n\nexport class tendance{\n    time    : number\n    distance: number\n    averageSpeed : number\n\n    constructor(){\n        this.time         = 0;\n        this.distance     = 0;\n        this.averageSpeed = 0;\n    }\n}","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface ActivitiesListItem {\n  id          : number,\n  date        : Date,\n  name        : string,\n  duration    : number,\n  averageSpeed: number,\n  distance    : number,\n  kmByHour    : number\n}\n\nexport class ActivitiesListItemClass {\n  id          : number\n  date        : Date\n  name        : string\n  duration    : number\n  averageSpeed: number\n  distance    : number\n  kmByHour    : number\n\n  constructor(){\n    this.id           = 0;\n    this.date         = new Date();\n    this.distance     = 0;\n    this.duration     = 0;\n    this.name         = '';\n    this.averageSpeed = 0;\n  }\n}\n\n/**\n * Data source for the ActivitiesList view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class ActivitiesListDataSource extends DataSource<ActivitiesListItem> {\n  // data: ActivitiesListItem[] = EXAMPLE_DATA;\n  data: ActivitiesListItem[] = [];\n\n  constructor(    \n    private paginator?: MatPaginator, \n    private sort?: MatSort\n    ) {\n      super();      \n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<ActivitiesListItem[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];    \n\n    // Set the paginator's length\n    this.paginator.length = this.data.length;\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  setDatas(p_dataArray: ActivitiesListItem[]){\n      if (p_dataArray){\n        this.data = p_dataArray;\n      }else{\n        console.error(`Tableau absent en paramètre`);\n      }\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: ActivitiesListItem[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: ActivitiesListItem[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","module.exports = \"<div class=\\\"mat-elevation-z8\\\">\\n  <table mat-table class=\\\"full-width-table\\\" [dataSource]=\\\"dataSource.data\\\" matSort aria-label=\\\"Elements\\\">\\n    \\n    <!-- Id Column -->\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.id}}</td>\\n    </ng-container>\\n\\n    <!-- Date Column -->\\n    <ng-container matColumnDef=\\\"date\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Date</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.date | date:'dd.MM.yyyy'}}</td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"><span class='text-orange'>{{row.name}}</span></td>\\n    </ng-container>\\n\\n    <!-- Duration Column -->\\n    <ng-container matColumnDef=\\\"duration\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Durée</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"><span class='text-orange text-info'>{{row.duration}}</span> min</td>\\n    </ng-container>\\n\\n    <!-- AverageSpeed Column -->\\n    <ng-container matColumnDef=\\\"averageSpeed\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Allure</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"><span class='text-orange text-info'>{{row.averageSpeed}}</span> min/Km (<b><span class='text-orange'>{{row.kmByHour}}</span></b> km/h)</td>\\n    </ng-container>\\n\\n      <!-- Distance Column -->\\n    <ng-container matColumnDef=\\\"distance\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Distance</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\"><span class='text-orange text-info'>{{row.distance}}</span> Km</td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n  <mat-paginator #paginator\\n      [length]=\\\"dataSource.data.length\\\"\\n      [pageIndex]=\\\"0\\\"\\n      [pageSize]=\\\"50\\\"\\n      [pageSizeOptions]=\\\"[25, 50, 100, 250]\\\">\\n  </mat-paginator>\\n</div>\\n\"","module.exports = \".full-width-table {\\n  width: 100%; }\\n\\n.text-orange {\\n  color: #fc4c02; }\\n\\n.text-info {\\n  font-size: 1.75em; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pvam8vRG9jdW1lbnRzL0RldmVsb3BwZW1lbnQvUHJvamV0c1dlYi9zdHJhdmFBbmFseXRpY3Mvc3JjL2FwcC9jb21wb25lbnRzL2FjdGl2aXRpZXMtbGlzdC9hY3Rpdml0aWVzLWxpc3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFXLEVBQ1o7O0FBRUQ7RUFDRSxlQUFjLEVBQ2Y7O0FBRUQ7RUFDRSxrQkFBaUIsRUFDbEIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2FjdGl2aXRpZXMtbGlzdC9hY3Rpdml0aWVzLWxpc3QuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZnVsbC13aWR0aC10YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4udGV4dC1vcmFuZ2V7XG4gIGNvbG9yOiAjZmM0YzAyOyBcbn1cblxuLnRleHQtaW5mb3tcbiAgZm9udC1zaXplOiAxLjc1ZW07XG59Il19 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { ActivitiesListDataSource, ActivitiesListItem, ActivitiesListItemClass } from './activities-list-datasource';\nimport { ActivitiesService } from 'src/app/services/activities.service';\nimport { TimeMethods } from 'src/app/configuration/timeMethods';\nimport { UtilsMethods } from 'src/app/configuration/utils';\n\n@Component({\n  selector: 'app-activities-list',\n  templateUrl: './activities-list.component.html',\n  styleUrls: ['./activities-list.component.scss']\n})\nexport class ActivitiesListComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  dataSource: ActivitiesListDataSource = new ActivitiesListDataSource();\n\n  constructor(\n    private activitiesService : ActivitiesService\n  ){}\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['id', 'date', 'name', 'duration', 'averageSpeed', 'distance'];\n\n  ngOnInit() {\n    this.dataSource = new ActivitiesListDataSource(this.paginator, this.sort);\n    this.activitiesService.getCompleteActivitiesList().subscribe(data=>{\n      let activitiesArray : ActivitiesListItem[] = [];      \n      data.forEach(element => {\n        let activity : ActivitiesListItem = new ActivitiesListItemClass();\n        activity.id           = element.id,\n        activity.name         = element.name,\n        activity.date         = new Date(element.start_date_local),\n        activity.distance     = parseFloat((element.distance / 1000).toFixed(3)),\n        activity.duration     = TimeMethods.convertSecondsInMinutes(element.moving_time),\n        activity.averageSpeed = TimeMethods.convertSecondsInMinutes(\n          parseFloat((element.moving_time/activity.distance).toFixed(2))\n        )\n        activity.kmByHour     = UtilsMethods.getKmByHourFromSeconds(element.moving_time, element.distance)\n        activitiesArray.push(activity) \n      });\n      this.dataSource.setDatas(activitiesArray);\n    })    \n  }\n}\n","module.exports = \"<div class=\\\"grid-container\\\">\\n  <h1 class=\\\"mat-h1 text-orange\\\" style='text-align: center;'>Mon tableau de bord</h1>\\n  <mat-grid-list [cols]='colsCount' [rowHeight]='ratio'>      \\n    <!-- Dernière activité et stats en cours -->\\n    <mat-grid-tile [colspan]='colspanActivityPreview' [rowspan]='rowspanActivityPreview'>        \\n      <app-last-activity-preview></app-last-activity-preview>\\n    </mat-grid-tile>        \\n    <!-- Année en cours  --> \\n    <mat-grid-tile [colspan]='colspanSynthese' [rowspan]='rowspanSynthese'>\\n        <mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n          <mat-card-header>\\n            <mat-card-title class=\\\"text-orange\\\">\\n              Synthèse annuelle\\n            </mat-card-title>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div>\\n                <img mat-card-avatar src='assets/runningIcon.png' ><span class='marginTitle'><b>Runs</b></span><span class=\\\"fontSize-synthese text-orange\\\"> {{ actualYearStats.totalRuns[0] }} </span><mat-divider></mat-divider>\\n            </div>\\n            <div>\\n                <img mat-card-avatar src='assets/distance.png' ><span class='marginTitle'><b>Distance</b></span>\\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ actualYearStats.totalDistance[0] }}</span> Km\\n                <span class=\\\"fontSize-synthese separator\\\">|</span>\\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ actualYearStats.totalDistance[1] }}</span> Km/activité<mat-divider></mat-divider>\\n            </div>\\n            <div>\\n                <img mat-card-avatar src='assets/horloge.svg' ><span class='marginTitle'><b>Temps</b></span>\\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ actualYearStats.totalTime[0] }}</span> H\\n                <span class=\\\"fontSize-synthese separator\\\">|</span>\\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ actualYearStats.totalTime[1] }}</span> min/activité<mat-divider></mat-divider>\\n            </div>            \\n            <div>\\n                <img mat-card-avatar src='assets/average.png' ><span class='marginTitle'><b>Allure</b></span>\\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ actualYearStats.averageSpeed[0] }}</span> min/Km\\n                <span class=\\\"fontSize-synthese separator\\\">|</span> \\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ actualYearStats.averageSpeed[1] }}</span> Km/heure\\n            </div>\\n          </mat-card-content> \\n        </mat-card>\\n      </mat-grid-tile>\\n    <span *ngIf='isGraphsShowable'>\\n      <mat-grid-tile [colspan]='colspanGraphs' [rowspan]='rowspanGraphs'>\\n        <mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n          <mat-card-header>\\n            <mat-card-title class=\\\"text-orange\\\">\\n              Année en cours\\n            </mat-card-title>\\n          </mat-card-header>\\n          <mat-card-content class=\\\"dashboard-card-content\\\">\\n            <canvas id=\\\"chartN\\\"></canvas>\\n          </mat-card-content>          \\n        </mat-card>\\n      </mat-grid-tile> \\n    </span>    \\n    <span *ngIf='isGraphsShowable'>\\n      <mat-grid-tile [colspan]='colspanGraphs' [rowspan]='rowspanGraphs'> \\n        <mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n          <mat-card-header>\\n            <mat-card-title class=\\\"text-orange\\\">\\n              Distance parcourue cette année\\n            </mat-card-title>\\n          </mat-card-header>\\n          <mat-card-content class=\\\"dashboard-card-content\\\">\\n            <canvas id=\\\"distanceN\\\"></canvas>\\n          </mat-card-content>\\n        </mat-card>\\n      </mat-grid-tile>  \\n    </span>          \\n     <!-- N - 1  -->\\n     <mat-grid-tile [colspan]='colspanSmall' [rowspan]='rowspanSmall'>\\n        <mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n          <mat-card-header>\\n            <mat-card-title class=\\\"text-orange\\\">\\n              Tendance sur l'année\\n            </mat-card-title>\\n          </mat-card-header>\\n          <mat-card-content>  \\n            <div>\\n              <img mat-card-avatar src='assets/distance.png'><span class='marginTitle'><b>Distance</b></span>\\n              <span *ngIf=\\\"tendance.distance > -1 \\\"><img mat-card-avatar src='assets/green_arrow_up.png'>( <span style=\\\"color: green\\\"><b>+ {{ tendance.distance }}</b></span> kilomètre(s) par activité ) </span>\\n              <span *ngIf=\\\"tendance.distance < -1\\\"><img mat-card-avatar src='assets/red_arrow_down.png'>( <span style=\\\"color: red\\\"><b>{{ tendance.distance }}</b></span> kilomètre(s) par activité ) </span>\\n              <mat-divider></mat-divider>\\n            </div> \\n            <div>\\n              <img mat-card-avatar src='assets/horloge.svg'><span class='marginTitle'><b>Temps</b></span>\\n              <span *ngIf=\\\"tendance.time > -1\\\"><img mat-card-avatar src='assets/green_arrow_up.png'>( <span style=\\\"color: green\\\"><b>{{ tendance.time }}</b></span> minute(s) par activité ) </span>\\n              <span *ngIf=\\\"tendance.time < -1\\\"><img mat-card-avatar src='assets/red_arrow_down.png'>( <span style=\\\"color: red\\\"><b>+ {{ tendance.time }}</b></span> minute(s) par activité ) </span>\\n              <mat-divider></mat-divider>\\n            </div> \\n            <div>\\n              <img mat-card-avatar src='assets/average.png'><span class='marginTitle'><b>Allure</b></span>\\n              <span *ngIf=\\\"tendance.averageSpeed < -1\\\"><img mat-card-avatar src='assets/green_arrow_up.png'>( <span style=\\\"color: green\\\"><b>- {{ tendance.averageSpeed }}</b></span> min/Km par activité ) </span>\\n              <span *ngIf=\\\"tendance.averageSpeed > -1\\\"><img mat-card-avatar src='assets/red_arrow_down.png'>( <span style=\\\"color: red\\\"><b>+ {{ tendance.averageSpeed }}</b></span> min/Km par activité ) </span>\\n            </div>                 \\n          </mat-card-content>          \\n        </mat-card>\\n      </mat-grid-tile>\\n      <mat-grid-tile [colspan]='colspanSynthese' [rowspan]='rowspanSynthese'>\\n          <mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n            <mat-card-header>\\n              <mat-card-title class=\\\"text-orange\\\">\\n                Synthèse pour l'année dernière\\n              </mat-card-title>\\n            </mat-card-header>\\n            <mat-card-content>\\n              <div>\\n                  <img mat-card-avatar src='assets/runningIcon.png' ><span class='marginTitle'><b>Runs</b></span>\\n                  <span class=\\\"fontSize-synthese text-orange\\\"> {{ lastYearStats.totalRuns[0] }} </span><mat-divider></mat-divider>\\n              </div>\\n              <div>\\n                <img mat-card-avatar src='assets/distance.png' ><span class='marginTitle'><b>Distance</b></span>\\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ lastYearStats.totalDistance[0] }} </span>Km\\n                <span class=\\\"fontSize-synthese separator\\\">|</span>\\n                <span class=\\\"fontSize-synthese text-orange\\\">{{ lastYearStats.totalDistance[1] }} </span>Km/activité<mat-divider></mat-divider>\\n              </div>\\n              <div>\\n                  <img mat-card-avatar src='assets/horloge.svg' ><span class='marginTitle'><b>Temps</b></span>\\n                  <span class=\\\"fontSize-synthese text-orange\\\">{{ lastYearStats.totalTime[0] }}</span>H\\n                  <span class=\\\"fontSize-synthese separator\\\">|</span>\\n                  <span class=\\\"fontSize-synthese text-orange\\\">{{ lastYearStats.totalTime[1] }}</span>min/activité<mat-divider></mat-divider>\\n              </div>\\n              <div>\\n                  <img mat-card-avatar src='assets/average.png' ><span class='marginTitle'><b>Allure</b></span>\\n                  <span class=\\\"fontSize-synthese text-orange\\\">{{ lastYearStats.averageSpeed[0] }}</span>min/Km\\n                  <span class=\\\"fontSize-synthese separator\\\">|</span>\\n                  <span class=\\\"fontSize-synthese text-orange\\\">{{ lastYearStats.averageSpeed[1] }}</span>Km/heure\\n              </div> \\n            </mat-card-content>\\n          </mat-card>\\n        </mat-grid-tile>  \\n      <span *ngIf='isGraphsShowable'>\\n        <mat-grid-tile [colspan]='colspanGraphs' [rowspan]='rowspanGraphs'>\\n          <mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n            <mat-card-header>\\n              <mat-card-title class=\\\"text-orange\\\">\\n                L'année dernière\\n              </mat-card-title>\\n            </mat-card-header>\\n            <mat-card-content class=\\\"dashboard-card-content\\\">\\n              <canvas id=\\\"chartN-1\\\"></canvas>\\n            </mat-card-content>          \\n          </mat-card>\\n        </mat-grid-tile>\\n        <mat-grid-tile [colspan]='colspanGraphs' [rowspan]='rowspanGraphs'>\\n            <mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n              <mat-card-header>\\n                <mat-card-title class=\\\"text-orange\\\">\\n                  Distance parcourue l'année dernière\\n                </mat-card-title>\\n              </mat-card-header>\\n              <mat-card-content class=\\\"dashboard-card-content\\\"> \\n                <canvas id=\\\"distanceN-1\\\"></canvas>\\n              </mat-card-content>\\n            </mat-card>\\n          </mat-grid-tile>  \\n      </span>              \\n  </mat-grid-list>\\n</div>\\n\"","module.exports = \".grid-container {\\n  margin: 20px; }\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n  overflow: hidden; }\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n  color: black; }\\n\\n.text-orange {\\n  color: #fc4c02; }\\n\\n.fontSize-synthese {\\n  font-size: 2em;\\n  margin-left: 0.2em; }\\n\\n.separator {\\n  margin-left: 0.2em; }\\n\\n.marginTitle {\\n  margin-left: 0.8em;\\n  font-size: 1.1em; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pvam8vRG9jdW1lbnRzL0RldmVsb3BwZW1lbnQvUHJvamV0c1dlYi9zdHJhdmFBbmFseXRpY3Mvc3JjL2FwcC9jb21wb25lbnRzL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFZLEVBQ2I7O0FBRUQ7RUFDRSxtQkFBa0I7RUFDbEIsVUFBUztFQUNULFdBQVU7RUFDVixZQUFXO0VBQ1gsYUFBWTtFQUNaLGlCQUFnQixFQUNqQjs7QUFFRDtFQUNFLG1CQUFrQjtFQUNsQixTQUFRO0VBQ1IsWUFBVztFQUNYLGFBQVksRUFDYjs7QUFFRDtFQUNFLGVBQWMsRUFDZjs7QUFFRDtFQUNFLGVBQWM7RUFDZCxtQkFBa0IsRUFDbkI7O0FBR0Q7RUFDRSxtQkFBa0IsRUFDbkI7O0FBRUQ7RUFDRSxtQkFBa0I7RUFDbEIsaUJBQWdCLEVBQ2pCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmdyaWQtY29udGFpbmVyIHtcbiAgbWFyZ2luOiAyMHB4O1xufVxuXG4uZGFzaGJvYXJkLWNhcmQge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTVweDtcbiAgbGVmdDogMTVweDtcbiAgcmlnaHQ6IDE1cHg7XG4gIGJvdHRvbTogMTVweDsgIFxuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4ubW9yZS1idXR0b24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNXB4O1xuICByaWdodDogMTBweDtcbiAgY29sb3I6IGJsYWNrO1xufVxuXG4udGV4dC1vcmFuZ2V7XG4gIGNvbG9yOiAjZmM0YzAyOyBcbn1cblxuLmZvbnRTaXplLXN5bnRoZXNle1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luLWxlZnQ6IDAuMmVtO1xufVxuXG5cbi5zZXBhcmF0b3J7XG4gIG1hcmdpbi1sZWZ0OiAwLjJlbTtcbn1cblxuLm1hcmdpblRpdGxle1xuICBtYXJnaW4tbGVmdDogMC44ZW07XG4gIGZvbnQtc2l6ZTogMS4xZW07XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivitiesService } from 'src/app/services/activities.service';\nimport { UtilsMethods } from 'src/app/configuration/utils';\nimport { AnnualStatsInterface, AnnualStatsClass } from 'src/app/classes/annualStats';\nimport { Chart } from 'chart.js';\nimport { Constants } from 'src/app/configuration/constants';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { tendance } from 'src/app/classes/tendance';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit{\n  \n  // Pour les graphs\n  colspanGraphs          = Constants.colspanLandscapeGraphs;\n  rowspanGraphs          = Constants.rowspanLandscapeGraphs;\n  colspanSynthese        = Constants.rowspanLandscapeGraphs;\n  rowspanSynthese        = Constants.rowspanLandscapeGraphs;\n  colspanSmall           = Constants.rowspanLandscapeSmall;\n  rowspanSmall           = Constants.rowspanLandscapeSmall;\n  colspanActivityPreview = Constants.rowspanLandscapeSmall;\n  rowspanActivityPreview = Constants.rowspanLandscapeSmall;\n  ratio                  = Constants.ratioLandscape;\n  colsCount              = Constants.colCountLandscape;\n  \n  tendance : tendance = new tendance(); \n\n  isGraphsShowable : boolean = true;\n  // Surveille la résolution de l'écran pour le web paysage\n  isWebLandscape: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.WebLandscape)\n    .pipe(\n      map(result => result.matches)\n    )\n  // Surveille la résolution de l'écran pour le web portrait\n  isWebPortrait: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.WebPortrait)\n    .pipe(\n      map(result => result.matches)\n    )\n  // Surveille la résolution de l'écran pour le mobile portrait\n  isHandsetPortrait: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.HandsetPortrait)\n  .pipe(\n    map(result => result.matches)\n  )\n  // Surveille la résolution de l'écran pour le mobile paysage\n  isHandsetLandscape: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.HandsetLandscape)\n  .pipe(\n    map(result => result.matches)\n  )\n\n  // Tableaux contenant les activités\n  activitiesListPastYear  : AnnualStatsInterface;  \n  activitiesListAcutalYear: AnnualStatsInterface;\n  // Objet javasript pour les charts\n  graphN1 = []\n  graphN  = []\n  // Objets Stats\n  actualYearStats: AnnualStatsInterface = new AnnualStatsClass();\n  lastYearStats  : AnnualStatsInterface = new AnnualStatsClass();\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private activitiesService : ActivitiesService\n  ){}\n\n  ngOnInit(){\n    // Pour le paysage web\n    this.isWebLandscape.subscribe(p_boo=>{\n      if (p_boo){\n        if (!this.isGraphsShowable){\n          \n          this.isGraphsShowable = true;          \n        }\n        this.colspanGraphs          = Constants.colspanLandscapeGraphs;\n        this.rowspanGraphs          = Constants.rowspanLandscapeGraphs;\n        this.rowspanSynthese        = Constants.rowspanLandscapeSynthese;\n        this.colspanSynthese        = Constants.colspanLandscapeSynthese;\n        this.rowspanSmall           = Constants.rowspanLandscapeSmall;\n        this.colspanSmall           = Constants.colspanLandscapeSmall;\n        this.ratio                  = Constants.ratioLandscape;\n        this.colsCount              = Constants.colCountLandscape;\n        this.rowspanActivityPreview = Constants.rowspanLandscapeActivityPreview;\n        this.colspanActivityPreview = Constants.colspanLandscapeActivityPreview;\n      }      \n    })  \n    // Pour le portrait web\n    this.isWebPortrait.subscribe(p_boo=>{\n      if (p_boo){\n        this.isGraphsShowable = true;\n        this.colspanGraphs          = Constants.colspanPortraitGraphs;\n        this.rowspanGraphs          = Constants.rowspanPortraitGraphs;\n        this.rowspanSynthese        = Constants.rowspanPortraitSynthese;\n        this.colspanSynthese        = Constants.colspanPortraitSynthese;\n        this.rowspanSmall           = Constants.rowspanPortraitSmall;\n        this.colspanSmall           = Constants.colspanPortraitSmall;\n        this.ratio                  = Constants.ratioPortrait;\n        this.colsCount              = Constants.colCountPortrait;\n        this.rowspanActivityPreview = Constants.rowspanPortraitActivityPreview;\n        this.colspanActivityPreview = Constants.colspanPortraitActivityPreview;\n      }      \n    })  \n    // Pour le paysage mobile\n    this.isHandsetLandscape.subscribe(p_boo=>{\n      if (p_boo){\n        this.isGraphsShowable = true;\n        this.colspanGraphs          = Constants.handsetColspanLandscapeGraphs;\n        this.rowspanGraphs          = Constants.handsetRowspanLandscapeGraphs;\n        this.rowspanSynthese        = Constants.handsetRowspanLandscapeSynthese;\n        this.colspanSynthese        = Constants.handsetColspanLandscapeSynthese;\n        this.rowspanSmall           = Constants.handsetRowspanLandscapeSmall;\n        this.colspanSmall           = Constants.handsetColspanLandscapeSmall;\n        this.ratio                  = Constants.handsetRatioLandscape;\n        this.colsCount              = Constants.handsetColCountLandscape;\n        this.rowspanActivityPreview = Constants.handsetRowspanLandscapeActivityPreview;\n        this.colspanActivityPreview = Constants.handsetColspanLandscapeActivityPreview;\n      }      \n    })  \n    // Pour le portrait mobile\n    this.isHandsetPortrait.subscribe(p_boo=>{\n      if (p_boo){\n        this.isGraphsShowable = false;\n        this.colspanGraphs          = Constants.handsetColspanPortraitGraphs;\n        this.rowspanGraphs          = Constants.handsetRowspanPortraitGraphs;\n        this.rowspanSynthese        = Constants.handsetRowspanPortraitSynthese;\n        this.colspanSynthese        = Constants.handsetColspanPortraitSynthese;\n        this.rowspanSmall           = Constants.handsetRowspanPortraitSmall;\n        this.colspanSmall           = Constants.handsetColspanPortraitSmall;\n        this.ratio                  = Constants.handsetRatioPortrait;\n        this.colsCount              = Constants.handsetColCountPortrait;\n        this.rowspanActivityPreview = Constants.handsetRowspanPortraitActivityPreview;\n        this.colspanActivityPreview = Constants.handsetColspanPortraitActivityPreview;\n      }      \n    })  \n    // Pour surveiller et obtenir les infos de la tendance de l'année\n    UtilsMethods.tendanceSubject.subscribe(p_tendance=>{\n      if (p_tendance){\n        this.tendance = p_tendance;           \n      }\n    })   \n    this.getActivitiesListPastYear();\n    this.getActivitiesListActualYear();      \n  }\n\n  // Récupère les stats de l'année passée\n  getActivitiesListActualYear(){\n    // Définit les périodes de début et de fin\n    let tempDate : Date = new Date();\n    let startPeriod = parseInt((Date.now()/1000).toString());\n    let endPeriod = Date.parse(tempDate.getFullYear()-1+'-12-31T00:00:00')/1000;\n    // Récupère la liste des activités de N\n    this.activitiesService.getPeriodActivitiesList(startPeriod, endPeriod).subscribe(data=>{\n      // Affectation dans la variable du component et création des graphs\n      this.activitiesListAcutalYear = UtilsMethods.getYearStatsByMonth(data)\n      this.createGraphicActualYear();  \n      this.createGraphicDistanceActualYear();\n\n      // récupère les infos de l'année\n      let yearActivities = new Array();\n      data.forEach(p_activity=>{\n        yearActivities.push(p_activity);\n      })\n      this.actualYearStats= UtilsMethods.getYearStats(yearActivities);\n      UtilsMethods.getYearTendance(this.lastYearStats, this.actualYearStats);\n    })  \n  }\n\n  // Récupère les stats de l'année passée\n  getActivitiesListPastYear(){\n    // Définit les périodes de début et de fin\n    let startPeriod = Date.parse(new Date(Date.now()).getFullYear()-1+'-12-31T00:00:00')/1000; \n    let endPeriod = Date.parse(new Date(Date.now()).getFullYear()-1+'-01-01T00:00:00')/1000; \n    // Récupère la liste des activités de N-1\n    this.activitiesService.getPeriodActivitiesList(startPeriod, endPeriod).subscribe(data=>{\n      // Affectation dans la variable du component et création des graphs\n      this.activitiesListPastYear = UtilsMethods.getYearStatsByMonth(data)\n      this.createGraphicsLastYear();  \n      this.createGraphicDistanceLastYear(); \n      \n      // récupère les infos de l'année\n      let yearActivities = new Array();\n      data.forEach(p_activity=>{\n        yearActivities.push(p_activity);\n      })\n      this.lastYearStats= UtilsMethods.getYearStats(yearActivities);\n      UtilsMethods.getYearTendance(this.lastYearStats, this.actualYearStats);\n    })  \n  }\n\n  // Créee les graphs à afficher pour l'année en cours\n  createGraphicActualYear(){\n    if (this.activitiesListAcutalYear){\n      this.graphN = new Chart(`chartN`, { \n        type: 'line',        \n        data: {\n          labels: Constants.monthsOfYear,\n          datasets: [{\n            label: `Nombre de runs`,\n            fill: 'false',\n            data: this.activitiesListAcutalYear.totalRuns,\n            backgroundColor: Constants.couleurs.rouge,\n            borderColor: Constants.couleursBordures.rouge,\n            borderWidth: 2\n          },{\n            label: `Allure moyenne en min/km`,\n            fill: 'false',\n            data: this.activitiesListAcutalYear.averageSpeed,\n            backgroundColor: Constants.couleurs.violet,\n            borderColor: Constants.couleursBordures.violet,\n            borderWidth: 2\n          },{\n            label: `Temps de course total en heures`,\n            fill: 'false',\n            data: this.activitiesListAcutalYear.totalTime,\n            backgroundColor: Constants.couleurs.vert,\n            borderColor: Constants.couleursBordures.vert,\n            borderWidth: 2\n          }]\n        },\n        options: {\n          responsive: true,\n          tooltips: {\n            mode: 'index',\n            intersect: true\n\t\t\t\t\t}\n        }\n      })\n    }else{\n      console.error(`Le tableau du graph de l'année passée est vide`)\n    }\n  }\n\n  // Créee les graphs à afficher pour N-1\n  createGraphicsLastYear(){\n    if (this.activitiesListPastYear){\n      this.graphN1 = new Chart(`chartN-1`, { \n        type: 'line',        \n        data: {\n          labels: Constants.monthsOfYear,\n          datasets: [\n          {\n            label: `Nombre de runs`,\n            fill: 'false',\n            data: this.activitiesListPastYear.totalRuns,\n            backgroundColor: Constants.couleurs.orange,\n            borderColor: Constants.couleursBordures.orange,\n            borderWidth: 2\n          },{\n            label: `Allure moyenne en min/km`,\n            fill: 'false',\n            data: this.activitiesListPastYear.averageSpeed,\n            backgroundColor: Constants.couleurs.vert,\n            borderColor: Constants.couleursBordures.vert,\n            borderWidth: 2\n          },{\n            label: `Temps de course total en heures`,\n            fill: 'false',\n            data: this.activitiesListPastYear.totalTime,\n            backgroundColor: Constants.couleurs.rouge,\n            borderColor: Constants.couleursBordures.rouge,\n            borderWidth: 2\n          }]\n        },\n        options: {\n          responsive: true,\n          tooltips: {\n            mode: 'index',\n            intersect: true\n\t\t\t\t\t}\n        }\n      })\n    }else{\n      console.error(`Le tableau du graph de l'année passée est vide`)\n    }\n  }\n\n  // Créee les graphs à afficher pour N-1\n  createGraphicDistanceLastYear(){\n    if (this.activitiesListPastYear){\n      this.graphN1 = new Chart(`distanceN-1`, { \n        type: 'line',     \n        data: {\n          labels: Constants.monthsOfYear,\n          datasets: [{\n            label: `Distance parcourue en KM`,    \n            fill: 'origin',        \n            data: this.activitiesListPastYear.totalDistance,\n            backgroundColor: Constants.couleurs.violet,\n            borderColor: Constants.couleursBordures.violet,\n            borderWidth: 2       \n          }]\n        }\n      })\n    }else{\n      console.error(`Le tableau du graph de l'année passée est vide`)\n    }\n  } \n\n  // Créee les graphs à afficher pour N-1\n  createGraphicDistanceActualYear(){\n    if (this.activitiesListAcutalYear){\n      this.graphN1 = new Chart(`distanceN`, { \n        type: 'line',     \n        data: {\n          labels: Constants.monthsOfYear,\n          datasets: [{\n            label: `Distance parcourue en KM`,    \n            fill: 'origin',        \n            data: this.activitiesListAcutalYear.totalDistance,\n            backgroundColor: Constants.couleurs.bleu,\n            borderColor: Constants.couleursBordures.bleu,\n            borderWidth: 2,            \n          }]\n        }\n      })\n    }else{\n      console.error(`Le tableau du graph de l'année passée est vide`)\n    }\n  }\n}","module.exports = \"<mat-card class=\\\"dashboard-card mat-elevation-z8\\\">\\n  <mat-card-header>\\n    <img mat-card-avatar [src]='athlete.avatarURL'>\\n    <mat-card-title>\\n      Dernier run : <span class=\\\"text-orange\\\">{{ lastActivity.activityName }}</span>\\n      <!-- <button mat-icon-button class=\\\"more-button\\\" [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Toggle menu\\\">\\n        <mat-icon>more_vert</mat-icon>\\n      </button>\\n      <mat-menu #menu=\\\"matMenu\\\" xPosition=\\\"before\\\">\\n        <button mat-menu-item>Expand</button>\\n        <button mat-menu-item>Remove</button>\\n      </mat-menu> -->\\n    </mat-card-title>\\n    <mat-card-subtitle>par {{ athlete.firstName }} {{ athlete.lastName }} le {{ lastActivity.startDate | date:'dd.MM.yyyy' }}</mat-card-subtitle>\\n  </mat-card-header>\\n  <mat-card-content>    \\n      <div class='container'>\\n        <mat-list dense>\\n          <mat-list-item>\\n            <img mat-card-avatar src='assets/distance.png'><span class=\\\"text-orange text-info\\\">{{ lastActivity.distance }}</span> Km\\n            <mat-divider></mat-divider>\\n          </mat-list-item>\\n          <mat-list-item>\\n            <img mat-card-avatar src='assets/horloge.svg'><span class=\\\"text-orange text-info\\\">{{ lastActivity.duration }}</span> H\\n            <mat-divider></mat-divider>\\n          </mat-list-item>\\n          <mat-list-item>\\n            <img mat-card-avatar src='assets/average.png'><span class=\\\"text-orange text-info\\\">{{ lastActivity.averageSpeed }}</span> min/Km\\n            <mat-divider></mat-divider>\\n          </mat-list-item>\\n          <mat-list-item>\\n            <img mat-card-avatar src='assets/calories.jpg'><span class=\\\"text-orange text-info\\\">{{ lastActivity.calories }}</span> Cal\\n            <mat-divider></mat-divider>\\n          </mat-list-item>\\n        </mat-list>\\n        <div id=\\\"map\\\" class=\\\"map-leaflet\\\"></div>\\n      </div>\\n  </mat-card-content>    \\n</mat-card>\"","module.exports = \".dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n  overflow: hidden; }\\n\\n.text-orange {\\n  color: #fc4c02; }\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n  color: black; }\\n\\n.map-leaflet {\\n  min-height: 15em;\\n  width: 70%; }\\n\\n.container {\\n  display: flex;\\n  flex-wrap: wrap;\\n  flex-direction: row;\\n  align-items: stretch; }\\n\\n.text-info {\\n  font-size: 2em;\\n  margin-left: 0.3em;\\n  margin-right: 0.3em;\\n  padding-left: 0; }\\n\\n.list {\\n  list-style: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pvam8vRG9jdW1lbnRzL0RldmVsb3BwZW1lbnQvUHJvamV0c1dlYi9zdHJhdmFBbmFseXRpY3Mvc3JjL2FwcC9jb21wb25lbnRzL2xhc3QtYWN0aXZpdHktcHJldmlldy9sYXN0LWFjdGl2aXR5LXByZXZpZXcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxtQkFBa0I7RUFDbEIsVUFBUztFQUNULFdBQVU7RUFDVixZQUFXO0VBQ1gsYUFBWTtFQUNaLGlCQUFnQixFQUNuQjs7QUFFRDtFQUNJLGVBQWMsRUFDakI7O0FBRUQ7RUFDSSxtQkFBa0I7RUFDbEIsU0FBUTtFQUNSLFlBQVc7RUFDWCxhQUFZLEVBQ2Y7O0FBRUQ7RUFDSSxpQkFBZ0I7RUFDaEIsV0FBVSxFQUNiOztBQUVEO0VBQ0ksY0FBYTtFQUNiLGdCQUFlO0VBQ2Ysb0JBQW1CO0VBQ25CLHFCQUFvQixFQUN2Qjs7QUFFRDtFQUNJLGVBQWM7RUFDZCxtQkFBa0I7RUFDbEIsb0JBQW1CO0VBQ25CLGdCQUFlLEVBQ2xCOztBQUVEO0VBQ0ksaUJBQWdCLEVBQ25CIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9sYXN0LWFjdGl2aXR5LXByZXZpZXcvbGFzdC1hY3Rpdml0eS1wcmV2aWV3LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZC1jYXJkIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxNXB4O1xuICAgIGxlZnQ6IDE1cHg7XG4gICAgcmlnaHQ6IDE1cHg7XG4gICAgYm90dG9tOiAxNXB4OyAgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnRleHQtb3Jhbmdle1xuICAgIGNvbG9yOiAjZmM0YzAyOyBcbn1cblxuLm1vcmUtYnV0dG9uIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1cHg7XG4gICAgcmlnaHQ6IDEwcHg7XG4gICAgY29sb3I6IGJsYWNrO1xufVxuXG4ubWFwLWxlYWZsZXR7XG4gICAgbWluLWhlaWdodDogMTVlbTtcbiAgICB3aWR0aDogNzAlO1xufVxuXG4uY29udGFpbmVye1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG59XG5cbi50ZXh0LWluZm97XG4gICAgZm9udC1zaXplOiAyZW07XG4gICAgbWFyZ2luLWxlZnQ6IDAuM2VtO1xuICAgIG1hcmdpbi1yaWdodDogMC4zZW07XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xufVxuXG4ubGlzdHtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { AthletesService } from 'src/app/services/athletes.service';\nimport { ActivitiesService } from 'src/app/services/activities.service';\nimport * as L from 'leaflet'\nimport * as Polyline from 'polyline'\nimport { lastActivityClass, lastActivityInterface } from 'src/app/classes/lastActivityPreview';\nimport { Constants } from 'src/app/configuration/constants';\n\n@Component({\n  selector: 'app-last-activity-preview',\n  templateUrl: './last-activity-preview.component.html',\n  styleUrls: ['./last-activity-preview.component.scss']\n})\nexport class LastActivityPreviewComponent implements OnInit {\n\n  // La dernière activité recensée\n  lastActivity: lastActivityInterface = new lastActivityClass();\n  athlete = {\n    id       : 0,\n    firstName: \"\",\n    lastName : \"\",       \n    email    : \"\",\n    avatarURL: \"\"\n}\n\n  constructor(\n    private athleteService : AthletesService,\n    private activitiesServices: ActivitiesService\n  ) { }\n\n  ngOnInit() {\n    this.athleteService.getLoggedInAthlete().subscribe(p_athlete=>{\n      if (p_athlete){\n        this.athlete.id        = p_athlete.id;\n        this.athlete.firstName = p_athlete.firstname;\n        this.athlete.lastName  = p_athlete.lastname;\n        this.athlete.email     = p_athlete['email'];\n        this.athlete.avatarURL = p_athlete.profile_medium;\n      }\n    })\n    this.activitiesServices.getLastActivity().subscribe(p_activity=>{\n      if (p_activity){\n        this.lastActivity = p_activity;\n        let map = L.map('map').setView([this.lastActivity.startLongitude[0], this.lastActivity.startLongitude[1]], 13)\n        L.tileLayer(\n          'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n              maxZoom: 25,\n          }).addTo(map);\n        let coords = Polyline.decode(this.lastActivity.map.summary_polyline)\n        L.polyline(coords, { color: Constants.couleurs.violet, lineJoin: 'round' }).addTo(map);\n      }    \n    })\n  }\n\n}\n","export class Constants {\n\n    /**\n     * Valeurs par défaut pour les besoins d'authentifications\n     */\n    public static REDIRECT_URI_DEFAULT         : string = 'https://jonathanroyer76.github.io/stravaAnalytics/';\n    public static RESPONSE_TYPE_DEFAULT        : string = 'code';\n    public static GRANT_TYPE_FIRST_CODE_DEFAULT: string = 'authorization_code';\n    public static APPROVAL_PROMPT_DEFAULT      : string = 'force';\n    public static SCOPE_DEFAULT                : string = 'profile:read_all,profile:write,activity:read_all,activity:write'; \n    public static CLIENT_ID_DEFAULT            : number = 30076; \n    public static CLIENT_SECRET_DEFAULT        : string = '9dd09e3d2d56c0cc7a7dc8554dd2f2a2d351a34f';\n\n    /**\n     * noms des params dans les requètes URL \n     */\n    public static CLIENT_ID_PARAM       : string = 'client_id';\n    public static CLIENT_SECRET_PARAM   : string = 'client_secret'; \n    public static CLIENT_CODE_PARAM     : string = 'code';\n    public static REDIRECT_URI_PARAM    : string = 'redirect_uri';\n    public static RESPONSE_TYPE_PARAM   : string = 'response_type';\n    public static APPROVAL_PROMPT_PARAM : string = 'approval_prompt';\n    public static SCOPE_PARAM           : string = 'scope';\n    public static GRANT_TYPE_PARAM      : string = 'grant_type';\n\n    /**\n     * Cookies\n     */\n    // Client ID\n    public static CLIENT_ID_COOKIE    : string = \"client_id_strava\"\n    // client secret\n    public static CLIENT_SECRET_COOKIE: string = \"client_secret_strava\"\n    // Nom du access token\n    public static ACCESS_TOKEN_COOKIE : string = \"access_token_strava\";\n    // Nom du refresh Token\n    public static REFRESH_TOKEN_COOKIE: string = \"refresh_token_strava\";\n    // Nom du refresh Token\n    public static CODE_COOKIE         : string = \"code_strava\";\n    // Nom du refresh Token\n    public static EXPIRES_AT_COOKIE   : string = \"expires_at_strava\";\n\n    /**\n     * Pour les échanges avec Strava\n     */\n    // A compléter avec le token\n    public static BASE_TOKEN          : string = `Bearer `;\n    // Nom du header à placer dans les requètes\n    public static HEADER_AUTHORIZATION: string = `Authorization`;\n\n    /**\n     * Divers\n     */\n    // Définition des couleurs\n    public static couleurs = {\n        rouge: 'rgba(255, 99, 132, 0.5)',\n        orange: 'rgba(255, 159, 64, 0.5)',\n        jaune: 'rgba(255, 205, 86, 0.5)',\n        vert: 'rgba(75, 192, 192, 0.5)',\n        bleu: 'rgba(54, 162, 235, 0.5)',\n        violet: 'rgba(153, 102, 255, 0.5)',\n        gris: 'rgba(201, 203, 207, 0.5)'\n    };\n    // Définition des couleurs des bordures\n    public static couleursBordures = {\n        rouge: 'rgba(255, 99, 132, 1)',\n        orange: 'rgba(255, 159, 64, 1)',\n        jaune: 'rgba(255, 205, 86, 1)',\n        vert: 'rgba(75, 192, 192, 1)',\n        bleu: 'rgba(54, 162, 235, 1)',\n        violet: 'rgba(153, 102, 255, 1)',\n        gris: 'rgba(201, 203, 207, 1)'\n    };\n\n    // Définitions des mois de l'année\n    public static monthsOfYear = [\n        'Janvier',\n        'Février',\n        'Mars',\n        'Avril',\n        'Mai',\n        'Juin',\n        'Juillet',\n        'Aout',\n        'Septembre',\n        'Octobre',\n        'Novembre',\n        'Décembre',\n    ]\n\n    // Pour l'affichage Web en mode paysage\n    public static colspanLandscapeGraphs = 3;\n    public static rowspanLandscapeGraphs = 12;\n    public static colspanLandscapeSynthese = 2;\n    public static rowspanLandscapeSynthese = 8;\n    public static colspanLandscapeSmall = 2;\n    public static rowspanLandscapeSmall = 7;\n    public static colspanLandscapeActivityPreview = 3;\n    public static rowspanLandscapeActivityPreview = 9;\n    public static ratioLandscape = '7:1';\n    public static colCountLandscape = 7;\n    // Pour l'affichage web en mode portait\n    public static colspanPortraitGraphs = 4;\n    public static rowspanPortraitGraphs = 9;\n    public static colspanPortraitSynthese = 2;\n    public static rowspanPortraitSynthese = 5;\n    public static colspanPortraitSmall = 2;\n    public static rowspanPortraitSmall = 4;\n    public static colspanPortraitActivityPreview = 3;\n    public static rowspanPortraitActivityPreview = 5;\n    public static ratioPortrait = '4:1';\n    public static colCountPortrait = 4;\n\n    // Pour l'affichage mobile en mode paysage\n    public static handsetColspanLandscapeGraphs = 4;\n    public static handsetRowspanLandscapeGraphs = 16;\n    public static handsetColspanLandscapeSynthese = 3;\n    public static handsetRowspanLandscapeSynthese = 12;\n    public static handsetColspanLandscapeSmall = 3;\n    public static handsetRowspanLandscapeSmall = 10;\n    public static handsetColspanLandscapeActivityPreview = 4;\n    public static handsetRowspanLandscapeActivityPreview = 12;\n    public static handsetRatioLandscape = '7:1';\n    public static handsetColCountLandscape = 4;\n    // Pour l'affichage mobile en mode portait\n    public static handsetColspanPortraitGraphs = 4;\n    public static handsetRowspanPortraitGraphs = 25;\n    public static handsetColspanPortraitSynthese = 4;\n    public static handsetRowspanPortraitSynthese = 40;\n    public static handsetColspanPortraitSmall = 4;\n    public static handsetRowspanPortraitSmall = 28;\n    public static handsetColspanPortraitActivityPreview = 4;\n    public static handsetRowspanPortraitActivityPreview = 50;\n    public static handsetRatioPortrait = '8:1';\n    public static handsetColCountPortrait = 4;\n}\n","export class TimeMethods{\n\n    // Converti des secondes en heures\n    static convertSecondsInHours(p_value: number):number{\n        if (p_value){\n            let returnValue;\n            let hoursCount = parseInt((p_value/3600).toString());         \n            let minutesCount = (p_value/3600) - (Math.floor((p_value/3600)))\n            minutesCount = parseInt((minutesCount*60).toString())/100;\n            returnValue = hoursCount + minutesCount;\n            \n            return returnValue;\n        }else{\n            console.error(`Valeur absente`)\n        }\n    }\n\n    // Converti des secondes en minutes\n    static convertSecondsInMinutes(p_value: number):number{\n        if (p_value){\n            let returnValue;\n            let minutesCount = parseInt((p_value/60).toString());         \n            let secondsCount = (p_value/60) - (Math.floor((p_value/60)))\n            secondsCount = parseInt((secondsCount*60).toString())/100;\n            returnValue = minutesCount + secondsCount;\n            \n            return returnValue;\n        }\n    }\n\n    // Renvoie le nombre de minutes contenues dans la valeur en secondes\n    static getMinutesInSeconds(p_value: number):number{\n\n        if (p_value){\n            return parseInt((p_value/60).toString()) \n        }else{\n            console.error(`Pas de valeur en paramètre`)\n        }\n    }\n\n    // Renvoie le nombre d'heures contenues dans la valeur en secondes\n    static getHoursInSeconds(p_value: number):number{\n\n        if (p_value){\n            return parseInt((p_value/3600).toString())\n        }else{\n            console.error(`Pas de valeur en paramètre`)\n        }\n    }\n\n    // Renvoie le nombre de secondes contenues dans la valeur en secondes\n    static getSecondsInSeconds(p_value: number):number{\n\n        if (p_value){\n            let minutesCount = p_value/60;  // Pour avoir le nombre de minutes\n            let temp = minutesCount - Math.floor(minutesCount); // Pour avoir seulement les décimales\n            temp = parseInt((temp*100).toString())  // Pour avoir les 2 premiers chiffres après la virgule\n            temp = temp / 100;  // Tansforme en entier\n            temp = temp*60; // Converti en secondes\n            return parseInt(temp.toString());\n        }else{\n            console.error(`Pas de valeur en paramètre`)\n        }\n    }\n}","export class UrlsStrava{\n\n    // URL de base\n    public static BASE_URL : string = `https://www.strava.com/`\n    // Complément pour la connexion\n    public static BASE_OAUTH : string = UrlsStrava.BASE_URL+`oauth/`\n    // Complément pour l'API\n    public static BASE_API : string = UrlsStrava.BASE_URL+`api/v3/`\n    \n    /**\n     * URLs de connexion/déconnexion\n     */\n    // URL de connexion strava pour obtenir les droits d'accès à l'application\n    public static URL_AUTHORIZE  : string = UrlsStrava.BASE_OAUTH+`authorize`\n    // URL d'obtention de token\n    public static URL_TOKEN      : string = UrlsStrava.BASE_OAUTH+`token`;\n    // URL de connexion strava pour déconnecter l'application\n    public static URL_DEAUTHORIZE: string = UrlsStrava.BASE_OAUTH+`deauthorize` \n\n    /**\n     * URLs Athletes\n     */\n    // URL pour obtenir les infos de l'athlète associé au compte\n    public static URL_LOGGED_ATHLETE    : string = UrlsStrava.BASE_API+`athlete`;\n\n\n    /**\n     * URLs Activités\n     */\n    // URL pour obtenir la liste des activités du compte\n    public static URL_ACTIVITIES_LIST    : string = UrlsStrava.BASE_API+`athlete/activities`;\n    // URL pour obtenir une activité dont on connait l'ID\n    public static URL_ACTIVITY    : string = UrlsStrava.BASE_API+`activities/`;\n}","import { SummaryActivity } from '../interfacesStrava/models';\nimport { AnnualStatsClass, AnnualStatsInterface } from '../classes/annualStats'\nimport { TimeMethods } from './timeMethods'\nimport { BehaviorSubject } from 'rxjs';\nimport { tendance } from '../classes/tendance';\n\nexport class UtilsMethods{\n\n  // Contient la tendance annuelle\n  public static tendanceSubject : BehaviorSubject<tendance> = new BehaviorSubject<tendance>(new tendance());\n\n  // Détermine si le token est expiré ou pas\n  static isAccessTokenExpired(p_expiration: number):boolean{\n    \n    if (p_expiration <0) return true;\n    if (p_expiration){\n      let expirationDate = this.getTokenExpirationTime(p_expiration);\n      let actualDate = new Date(Date.now());\n      return (actualDate>expirationDate)\n    }\n  }\n\n  // Retourne la date et heure d'expiration du token sous forme de date\n  static getTokenExpirationTime(p_expiration: number):Date{\n    if (p_expiration <0) return null;\n    // Définit la date au 1er janvier 1970\n    let dateTemp = new Date(0);\n    dateTemp.setUTCSeconds(p_expiration);\n    return dateTemp;\n  }\n\n  // Obtient les statistiques pour l'année passée classé par mois\n  static getYearStatsByMonth(p_summaryActivities : SummaryActivity[]):AnnualStatsClass{\n    \n    let yearStats = new AnnualStatsClass();\n\n    if (p_summaryActivities){\n      let sortedArray = this.getMonthlySortedActivitiesArray(p_summaryActivities)\n\n      // Pour chaque mois, récupère les totaux/moyennes correspondants\n      sortedArray.forEach(monthArray=>{\n        yearStats.totalDistance.push(this.getTotalDistanceMonth(monthArray))\n        yearStats.totalRuns.push(this.getTotalRuns(monthArray));\n        yearStats.totalTime.push(this.getTotalTime(monthArray));\n        yearStats.totalSeconds.push(this.getTotalSeconds(monthArray));\n        yearStats.averageSpeed.push(this.getAverageSpeed(monthArray));\n      })\n\n    }else{\n      console.error(`tableau des activités non reçu.`)\n    }\n\n    return yearStats;\n  }\n\n  // Obtient les statistiques pour l'année passée\n  static getYearStats(p_activitiesList : SummaryActivity[]):AnnualStatsClass{\n    \n    let yearStats = new AnnualStatsClass();\n\n    if (p_activitiesList){\n        yearStats.totalDistance.push(this.getTotalDistanceMonth(p_activitiesList))\n        yearStats.totalRuns.push(this.getTotalRuns(p_activitiesList));\n        yearStats.totalTime.push(this.getTotalTime(p_activitiesList));\n        yearStats.totalSeconds.push(this.getTotalSeconds(p_activitiesList));\n        yearStats.totalMeters.push(this.getTotalMeters(p_activitiesList));\n        yearStats.averageSpeed.push(this.getAverageSpeed(p_activitiesList));\n        yearStats = this.getYearStatsByActivity(yearStats);\n    }else{\n      console.error(`tableau des activités non reçu.`)\n    }\n\n    return yearStats;\n  }\n\n  //Converti les min/km en km/h\n  static getKmByHourFromSeconds(p_seconds: number, p_totalDistance):number{\n\n    if (p_seconds){\n      if (p_totalDistance){\n        let returnValue = ((3600*p_totalDistance)/p_seconds)/1000;\n        return parseFloat(returnValue.toFixed(3));\n      }else{\n        console.error('Le nombre de kilomètres est manquant');\n      }\n    }else{\n      console.error('La valeur des secondes est manquante');\n    }\n  }\n\n  // Obtient les moyennes statistiques pour l'année passée par activité\n  static getYearStatsByActivity(p_activitiesArray : AnnualStatsClass):AnnualStatsClass{\n    \n    if (p_activitiesArray){\n      p_activitiesArray.totalRuns.push(p_activitiesArray.totalRuns[0]);\n      p_activitiesArray.totalSeconds.push(p_activitiesArray.totalSeconds[0]);\n      p_activitiesArray.totalMeters.push(p_activitiesArray.totalMeters[0]);\n      p_activitiesArray.totalDistance.push(parseFloat((p_activitiesArray.totalDistance[0]/p_activitiesArray.totalRuns[0]).toFixed(3)));\n      // Nombre de secondes moyenne par activité et conversion en minutes\n      let timeAverage = p_activitiesArray.totalSeconds[0]/p_activitiesArray.totalRuns[0];\n      p_activitiesArray.totalTime.push(TimeMethods.convertSecondsInMinutes(timeAverage));\n      p_activitiesArray.averageSpeed.push(this.getKmByHourFromSeconds(p_activitiesArray.totalSeconds[1], p_activitiesArray.totalMeters[1]))\n    }else{\n      console.error(`tableau des activités non reçu.`)\n    }\n\n    return p_activitiesArray;\n  }\n\n  // Renvoi une moyenne d'heures converti en minutes\n  static getAnnualTimeAverage(p_cumulActivities: AnnualStatsInterface): AnnualStatsInterface{\n\n    if (p_cumulActivities){\n      \n    }\n\n    return p_cumulActivities;\n  }\n\n  // Renvoie l'allure moyenne sur une période en min/km en fonction des paramètres\n  static getAverageSpeedFromValues(p_distance: number, p_seconds: number): number{\n    \n    let returnValue=0;\n    \n    if (p_distance){\n      if (p_seconds){\n          // Pour avoir le nombre de seconds correspondant à la moyenne\n          let secondsAverage = p_seconds/p_distance\n          returnValue = TimeMethods.convertSecondsInMinutes(secondsAverage);  \n      }else{\n        console.log(`Durée absente`);\n      }\n    }else{\n      console.error(`Distance absente`)\n    }\n\n    return returnValue;\n  }\n\n  // Renvoie l'allure moyenne sur une période en min/km\n  static getAverageSpeed(p_activities: SummaryActivity[]):number{\n    // Variables nécessaires\n    let returnValue=0;\n    \n    if (p_activities){\n      let totalDistance = this.getTotalDistanceMonth(p_activities);\n      let totalSeconds = this.getTotalSeconds(p_activities);\n      if (totalDistance && totalSeconds){\n        // Pour avoir le nombre de seconds correspondant à la moyenne\n        let secondsAverage = parseInt((totalSeconds/totalDistance).toString());\n        returnValue = TimeMethods.convertSecondsInMinutes(secondsAverage);\n      }else{\n        if (totalDistance){\n          console.error(`Distance de parcours total non récupéré`)\n        }else{\n          if (totalSeconds){\n            console.error(`Temps de parcours non récupéré`)\n          }\n        }\n      }\n    }else{\n      console.error(`Pas de données en paramètres.`)\n    }\n\n    return returnValue;\n  }\n\n  // Renvoie le temps total couru en heures et % d'heure : 1.65h = 1h et 65% de 1h\n  static getTotalTime(p_activities: SummaryActivity[]):number{\n    let returnValue = 0;\n\n    if (p_activities){\n      let seconds = this.getTotalSeconds(p_activities);\n      if (seconds){\n        returnValue = TimeMethods.convertSecondsInHours(seconds);\n      }\n    }\n    \n    return returnValue;\n  }\n\n  // Retourne le nombre total de mètres sur la période\n  static getTotalMeters(p_activities: SummaryActivity[]):number{\n    let returnValue =0;\n\n    p_activities.forEach(activity=>{\n      returnValue += activity.distance;\n    })\n    \n    return returnValue;\n  }\n\n  // Retourne le nombre total de secondes sur la période\n  static getTotalSeconds(p_activities: SummaryActivity[]):number{\n    let returnValue =0;\n\n    p_activities.forEach(activity=>{\n      returnValue += activity.moving_time;\n    })\n    \n    return returnValue;\n  }\n\n  // Renvoie le nombre total de courses dans l'année\n  static getTotalRuns(p_activities: SummaryActivity[]):number{\n    let returnValue = 0;\n\n    p_activities.forEach(activity=>{\n      returnValue += 1;\n    })\n\n    return returnValue;\n  }\n\n  // Calcul la distance totale et la convertit en kilomètre\n  static getTotalDistanceMonth(p_activities: SummaryActivity[]):number{\n    let returnValue;\n\n    if(p_activities){\n      // Calcul le total\n      returnValue=0;\n      p_activities.forEach(activity=>{\n        returnValue += activity.distance;        \n      })\n      returnValue = parseFloat((returnValue / 1000).toFixed(3));\n    }\n\n    return returnValue;\n  }\n\n  // Trie le tableau des activités par mois\n  static getMonthlySortedActivitiesArray(p_summaryActivities : SummaryActivity[]):Array<Array<SummaryActivity>>{\n    // Création des tableaux\n    let sortedArray = new Array();\n    for (let i=0; i<12; i++) sortedArray[i]=new Array()\n\n    // Répartition des activités\n    p_summaryActivities.forEach(p_activity=>{\n      let dateTemp : Date = new Date(p_activity.start_date_local); \n      let i = dateTemp.getMonth();\n      sortedArray[i].push(p_activity);\n    })\n\n    return sortedArray;\n  }\n\n  // Retourne la tendance de l'année\n  static getYearTendance(p_valN1: AnnualStatsInterface, p_valN: AnnualStatsInterface){\n      let returnValue = new tendance();\n      if (p_valN1){\n        if (p_valN1){\n          returnValue.distance = this.getDistanceDifference(p_valN1.totalDistance[1], p_valN.totalDistance[1])\n          returnValue.averageSpeed = this.getAverageSpeedDifference(p_valN1.averageSpeed[0], p_valN.averageSpeed[0])\n          returnValue.time = this.getTimeDifference(p_valN1.totalTime[0], p_valN.totalTime[0])\n          this.tendanceSubject.next(returnValue);\n        }\n      } \n  }\n\n  // Retourne la différence entre 2 valeurs de temps pour la tendance annuelle\n  static getTimeDifference(p_valN1: number, p_valN: number): number{\n    if (p_valN1){\n      if (p_valN){\n        return parseFloat((p_valN1-p_valN).toFixed(2));\n      }\n    }\n}\n\n  // Retourne la différence entre 2 valeurs de distance pour la tendance annuelle\n  static getDistanceDifference(p_valN1: number, p_valN: number): number{\n      if (p_valN1){\n        if (p_valN){\n          /**\n           * Convertir les % de secondes en secondes\n           */\n          return parseFloat((p_valN-p_valN1).toFixed(3));\n        }\n      }\n  }\n\n  // Retourne la différence entre 2 valeurs d'allure pour la tendance annuelle\n  static getAverageSpeedDifference(p_valN1: number, p_valN: number): number{\n      if (p_valN1){\n        if (p_valN){\n          return parseFloat((p_valN-p_valN1).toFixed(2));\n        }\n      }\n  }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\n/**\n * An enumeration of the types an activity may have.\n */\nexport type ActivityType = 'AlpineSki' | 'BackcountrySki' | 'Canoeing' | 'Crossfit' | 'EBikeRide' | 'Elliptical' | 'Handcycle' | 'Hike' | 'IceSkate' | 'InlineSkate' | 'Kayaking' | 'Kitesurf' | 'NordicSki' | 'Ride' | 'RockClimbing' | 'RollerSki' | 'Rowing' | 'Run' | 'Snowboard' | 'Snowshoe' | 'StairStepper' | 'StandUpPaddling' | 'Surfing' | 'Swim' | 'VirtualRide' | 'VirtualRun' | 'Walk' | 'WeightTraining' | 'Wheelchair' | 'Windsurf' | 'Workout' | 'Yoga';\n\nexport const ActivityType = {\n    AlpineSki: 'AlpineSki' as ActivityType,\n    BackcountrySki: 'BackcountrySki' as ActivityType,\n    Canoeing: 'Canoeing' as ActivityType,\n    Crossfit: 'Crossfit' as ActivityType,\n    EBikeRide: 'EBikeRide' as ActivityType,\n    Elliptical: 'Elliptical' as ActivityType,\n    Handcycle: 'Handcycle' as ActivityType,\n    Hike: 'Hike' as ActivityType,\n    IceSkate: 'IceSkate' as ActivityType,\n    InlineSkate: 'InlineSkate' as ActivityType,\n    Kayaking: 'Kayaking' as ActivityType,\n    Kitesurf: 'Kitesurf' as ActivityType,\n    NordicSki: 'NordicSki' as ActivityType,\n    Ride: 'Ride' as ActivityType,\n    RockClimbing: 'RockClimbing' as ActivityType,\n    RollerSki: 'RollerSki' as ActivityType,\n    Rowing: 'Rowing' as ActivityType,\n    Run: 'Run' as ActivityType,\n    Snowboard: 'Snowboard' as ActivityType,\n    Snowshoe: 'Snowshoe' as ActivityType,\n    StairStepper: 'StairStepper' as ActivityType,\n    StandUpPaddling: 'StandUpPaddling' as ActivityType,\n    Surfing: 'Surfing' as ActivityType,\n    Swim: 'Swim' as ActivityType,\n    VirtualRide: 'VirtualRide' as ActivityType,\n    VirtualRun: 'VirtualRun' as ActivityType,\n    Walk: 'Walk' as ActivityType,\n    WeightTraining: 'WeightTraining' as ActivityType,\n    Wheelchair: 'Wheelchair' as ActivityType,\n    Windsurf: 'Windsurf' as ActivityType,\n    Workout: 'Workout' as ActivityType,\n    Yoga: 'Yoga' as ActivityType\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { TimedZoneDistribution } from './timedZoneDistribution';\n\n\nexport interface ActivityZone {\n    score?: number;\n    distributionBuckets?: TimedZoneDistribution;\n    type?: ActivityZone.TypeEnum;\n    sensorBased?: boolean;\n    points?: number;\n    customZones?: boolean;\n    max?: number;\n}\nexport namespace ActivityZone {\n    export type TypeEnum = 'heartrate' | 'power';\n    export const TypeEnum = {\n        Heartrate: 'heartrate' as TypeEnum,\n        Power: 'power' as TypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface AltitudeStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: AltitudeStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: AltitudeStream.SeriesTypeEnum;\n    /**\n     * The sequence of altitude values for this stream, in meters\n     */\n    data?: Array<number>;\n}\nexport namespace AltitudeStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface BaseStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: BaseStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: BaseStream.SeriesTypeEnum;\n}\nexport namespace BaseStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface CadenceStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: CadenceStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: CadenceStream.SeriesTypeEnum;\n    /**\n     * The sequence of cadence values for this stream, in rotations per minute\n     */\n    data?: Array<number>;\n}\nexport namespace CadenceStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { SummaryAthlete } from './summaryAthlete';\nimport { SummaryClub } from './summaryClub';\nimport { SummaryGear } from './summaryGear';\n\n\nexport interface DetailedAthlete {\n    /**\n     * The unique identifier of the athlete\n     */\n    id?: number;\n    /**\n     * Resource state, indicates level of detail. Possible values: 1 -> \\\"meta\\\", 2 -> \\\"summary\\\", 3 -> \\\"detail\\\"\n     */\n    resourceState?: number;\n    /**\n     * The athlete's first name.\n     */\n    firstname?: string;\n    /**\n     * The athlete's last name.\n     */\n    lastname?: string;\n    /**\n     * URL to a 62x62 pixel profile picture.\n     */\n    profile_medium?: string;\n    /**\n     * URL to a 124x124 pixel profile picture.\n     */\n    profile?: string;\n    /**\n     * The athlete's city.\n     */\n    city?: string;\n    /**\n     * The athlete's state or geographical region.\n     */\n    state?: string;\n    /**\n     * The athlete's country.\n     */\n    country?: string;\n    /**\n     * The athlete's sex.\n     */\n    sex?: DetailedAthlete.SexEnum;\n    /**\n     * Whether the currently logged-in athlete follows this athlete.\n     */\n    friend?: DetailedAthlete.FriendEnum;\n    /**\n     * Whether this athlete follows the currently logged-in athlete.\n     */\n    follower?: DetailedAthlete.FollowerEnum;\n    /**\n     * Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.\n     */\n    premium?: boolean;\n    /**\n     * Whether the athlete has any Summit subscription.\n     */\n    summit?: boolean;\n    /**\n     * The time at which the athlete was created.\n     */\n    createdAt?: Date;\n    /**\n     * The time at which the athlete was last updated.\n     */\n    updatedAt?: Date;\n    /**\n     * The athlete's follower count.\n     */\n    followerCount?: number;\n    /**\n     * The athlete's friend count.\n     */\n    friendCount?: number;\n    /**\n     * The number or athletes mutually followed by this athlete and the currently logged-in athlete.\n     */\n    mutualFriendCount?: number;\n    /**\n     * The athlete's preferred unit system.\n     */\n    measurementPreference?: DetailedAthlete.MeasurementPreferenceEnum;\n    /**\n     * The athlete's FTP (Functional Threshold Power).\n     */\n    ftp?: number;\n    /**\n     * The athlete's weight.\n     */\n    weight?: number;\n    /**\n     * The athlete's clubs.\n     */\n    clubs?: Array<SummaryClub>;\n    /**\n     * The athlete's bikes.\n     */\n    bikes?: Array<SummaryGear>;\n    /**\n     * The athlete's shoes.\n     */\n    shoes?: Array<SummaryGear>;\n}\nexport namespace DetailedAthlete {\n    export type SexEnum = 'M' | 'F';\n    export const SexEnum = {\n        M: 'M' as SexEnum,\n        F: 'F' as SexEnum\n    }\n    export type FriendEnum = 'pending' | 'accepted' | 'blocked';\n    export const FriendEnum = {\n        Pending: 'pending' as FriendEnum,\n        Accepted: 'accepted' as FriendEnum,\n        Blocked: 'blocked' as FriendEnum\n    }\n    export type FollowerEnum = 'pending' | 'accepted' | 'blocked';\n    export const FollowerEnum = {\n        Pending: 'pending' as FollowerEnum,\n        Accepted: 'accepted' as FollowerEnum,\n        Blocked: 'blocked' as FollowerEnum\n    }\n    export type MeasurementPreferenceEnum = 'feet' | 'meters';\n    export const MeasurementPreferenceEnum = {\n        Feet: 'feet' as MeasurementPreferenceEnum,\n        Meters: 'meters' as MeasurementPreferenceEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { SummaryClub } from './summaryClub';\n\n\nexport interface DetailedClub {\n    /**\n     * The club's unique identifier.\n     */\n    id?: number;\n    /**\n     * Resource state, indicates level of detail. Possible values: 1 -> \\\"meta\\\", 2 -> \\\"summary\\\", 3 -> \\\"detail\\\"\n     */\n    resourceState?: number;\n    /**\n     * The club's name.\n     */\n    name?: string;\n    /**\n     * URL to a 60x60 pixel profile picture.\n     */\n    profileMedium?: string;\n    /**\n     * URL to a ~1185x580 pixel cover photo.\n     */\n    coverPhoto?: string;\n    /**\n     * URL to a ~360x176  pixel cover photo.\n     */\n    coverPhotoSmall?: string;\n    sportType?: DetailedClub.SportTypeEnum;\n    /**\n     * The club's city.\n     */\n    city?: string;\n    /**\n     * The club's state or geographical region.\n     */\n    state?: string;\n    /**\n     * The club's country.\n     */\n    country?: string;\n    /**\n     * Whether the club is private.\n     */\n    _private?: boolean;\n    /**\n     * The club's member count.\n     */\n    memberCount?: number;\n    /**\n     * Whether the club is featured or not.\n     */\n    featured?: boolean;\n    /**\n     * Whether the club is verified or not.\n     */\n    verified?: boolean;\n    /**\n     * The club's vanity URL.\n     */\n    url?: string;\n    /**\n     * The membership status of the logged-in athlete.\n     */\n    membership?: DetailedClub.MembershipEnum;\n    /**\n     * Whether the currently logged-in athlete is an administrator of this club.\n     */\n    admin?: boolean;\n    /**\n     * Whether the currently logged-in athlete is the owner of this club.\n     */\n    owner?: boolean;\n    /**\n     * The number of athletes in the club that the logged-in athlete follows.\n     */\n    followingCount?: number;\n}\nexport namespace DetailedClub {\n    export type SportTypeEnum = 'cycling' | 'running' | 'triathlon' | 'other';\n    export const SportTypeEnum = {\n        Cycling: 'cycling' as SportTypeEnum,\n        Running: 'running' as SportTypeEnum,\n        Triathlon: 'triathlon' as SportTypeEnum,\n        Other: 'other' as SportTypeEnum\n    }\n    export type MembershipEnum = 'member' | 'pending';\n    export const MembershipEnum = {\n        Member: 'member' as MembershipEnum,\n        Pending: 'pending' as MembershipEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { LatLng } from './latLng';\nimport { PolylineMap } from './polylineMap';\nimport { SummarySegment } from './summarySegment';\nimport { SummarySegmentEffort } from './summarySegmentEffort';\n\n\nexport interface DetailedSegment {\n    /**\n     * The unique identifier of this segment\n     */\n    id?: number;\n    /**\n     * The name of this segment\n     */\n    name?: string;\n    activityType?: DetailedSegment.ActivityTypeEnum;\n    /**\n     * The segment's distance, in meters\n     */\n    distance?: number;\n    /**\n     * The segment's average grade, in percents\n     */\n    averageGrade?: number;\n    /**\n     * The segments's maximum grade, in percents\n     */\n    maximumGrade?: number;\n    /**\n     * The segments's highest elevation, in meters\n     */\n    elevationHigh?: number;\n    /**\n     * The segments's lowest elevation, in meters\n     */\n    elevationLow?: number;\n    startLatlng?: LatLng;\n    endLatlng?: LatLng;\n    /**\n     * The category of the climb\n     */\n    climbCategory?: number;\n    /**\n     * The segments's city.\n     */\n    city?: string;\n    /**\n     * The segments's state or geographical region.\n     */\n    state?: string;\n    /**\n     * The segment's country.\n     */\n    country?: string;\n    /**\n     * Whether this segment is private.\n     */\n    _private?: boolean;\n    athletePrEffort?: SummarySegmentEffort;\n    /**\n     * The time at which the segment was created.\n     */\n    createdAt?: Date;\n    /**\n     * The time at which the segment was last updated.\n     */\n    updatedAt?: Date;\n    /**\n     * The segment's total elevation gain.\n     */\n    totalElevationGain?: number;\n    map?: PolylineMap;\n    /**\n     * The total number of efforts for this segment\n     */\n    effortCount?: number;\n    /**\n     * The number of unique athletes who have an effort for this segment\n     */\n    athleteCount?: number;\n    /**\n     * Whether this segment is considered hazardous\n     */\n    hazardous?: boolean;\n    /**\n     * The number of stars for this segment\n     */\n    starCount?: number;\n}\nexport namespace DetailedSegment {\n    export type ActivityTypeEnum = 'Ride' | 'Run';\n    export const ActivityTypeEnum = {\n        Ride: 'Ride' as ActivityTypeEnum,\n        Run: 'Run' as ActivityTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface DistanceStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: DistanceStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: DistanceStream.SeriesTypeEnum;\n    /**\n     * The sequence of distance values for this stream, in meters\n     */\n    data?: Array<number>;\n}\nexport namespace DistanceStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { LatLng } from './latLng';\n\n\nexport interface ExplorerSegment {\n    /**\n     * The unique identifier of this segment\n     */\n    id?: number;\n    /**\n     * The name of this segment\n     */\n    name?: string;\n    /**\n     * The category of the climb\n     */\n    climbCategory?: number;\n    /**\n     * The description for the category of the climb\n     */\n    climbCategoryDesc?: ExplorerSegment.ClimbCategoryDescEnum;\n    /**\n     * The segment's average grade, in percents\n     */\n    avgGrade?: number;\n    startLatlng?: LatLng;\n    endLatlng?: LatLng;\n    /**\n     * The segments's evelation difference, in meters\n     */\n    elevDifference?: number;\n    /**\n     * The segment's distance, in meters\n     */\n    distance?: number;\n    /**\n     * The polyline of the segment\n     */\n    points?: string;\n}\nexport namespace ExplorerSegment {\n    export type ClimbCategoryDescEnum = 'NC' | '4' | '3' | '2' | '1' | 'HC';\n    export const ClimbCategoryDescEnum = {\n        NC: 'NC' as ClimbCategoryDescEnum,\n        _4: '4' as ClimbCategoryDescEnum,\n        _3: '3' as ClimbCategoryDescEnum,\n        _2: '2' as ClimbCategoryDescEnum,\n        _1: '1' as ClimbCategoryDescEnum,\n        HC: 'HC' as ClimbCategoryDescEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface HeartrateStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: HeartrateStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: HeartrateStream.SeriesTypeEnum;\n    /**\n     * The sequence of heart rate values for this stream, in beats per minute\n     */\n    data?: Array<number>;\n}\nexport namespace HeartrateStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\nimport { LatLng } from './latLng';\n\n\nexport interface LatLngStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: LatLngStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: LatLngStream.SeriesTypeEnum;\n    /**\n     * The sequence of lat/long values for this stream\n     */\n    data?: Array<LatLng>;\n}\nexport namespace LatLngStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","export * from './activityStats';\nexport * from './activityTotal';\nexport * from './activityType';\nexport * from './activityZone';\nexport * from './baseStream';\nexport * from './comment';\nexport * from './explorerResponse';\nexport * from './explorerSegment';\nexport * from './fault';\nexport * from './heartRateZoneRanges';\nexport * from './lap';\nexport * from './latLng';\nexport * from './metaActivity';\nexport * from './metaAthlete';\nexport * from './metaClub';\nexport * from './modelError';\nexport * from './photosSummary';\nexport * from './photosSummaryPrimary';\nexport * from './polylineMap';\nexport * from './powerZoneRanges';\nexport * from './route';\nexport * from './routeDirection';\nexport * from './runningRace';\nexport * from './segmentLeaderboard';\nexport * from './segmentLeaderboardEntry';\nexport * from './split';\nexport * from './streamSet';\nexport * from './summaryGear';\nexport * from './summarySegment';\nexport * from './summarySegmentEffort';\nexport * from './timedZoneDistribution';\nexport * from './updatableActivity';\nexport * from './upload';\nexport * from './zoneRange';\nexport * from './zoneRanges';\nexport * from './zones';\nexport * from './altitudeStream';\nexport * from './cadenceStream';\nexport * from './detailedGear';\nexport * from './detailedSegment';\nexport * from './detailedSegmentEffort';\nexport * from './distanceStream';\nexport * from './heartrateStream';\nexport * from './latLngStream';\nexport * from './movingStream';\nexport * from './powerStream';\nexport * from './smoothGradeStream';\nexport * from './smoothVelocityStream';\nexport * from './summaryActivity';\nexport * from './summaryAthlete';\nexport * from './summaryClub';\nexport * from './temperatureStream';\nexport * from './timeStream';\nexport * from './timedZoneRange';\nexport * from './detailedActivity';\nexport * from './detailedAthlete';\nexport * from './detailedClub';\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface MovingStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: MovingStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: MovingStream.SeriesTypeEnum;\n    /**\n     * The sequence of moving values for this stream, as boolean values\n     */\n    data?: Array<boolean>;\n}\nexport namespace MovingStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface PowerStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: PowerStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: PowerStream.SeriesTypeEnum;\n    /**\n     * The sequence of power values for this stream, in watts\n     */\n    data?: Array<number>;\n}\nexport namespace PowerStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface RunningRace {\n    /**\n     * The unique identifier of this race.\n     */\n    id?: number;\n    /**\n     * The name of this race.\n     */\n    name?: string;\n    /**\n     * The type of this race.\n     */\n    runningRaceType?: number;\n    /**\n     * The race's distance, in meters.\n     */\n    distance?: number;\n    /**\n     * The time at which the race begins started in the local timezone.\n     */\n    startDateLocal?: Date;\n    /**\n     * The name of the city in which the race is taking place.\n     */\n    city?: string;\n    /**\n     * The name of the state or geographical region in which the race is taking place.\n     */\n    state?: string;\n    /**\n     * The name of the country in which the race is taking place.\n     */\n    country?: string;\n    /**\n     * The set of routes that cover this race's course.\n     */\n    routeIds?: Array<number>;\n    /**\n     * The unit system in which the race should be displayed.\n     */\n    measurementPreference?: RunningRace.MeasurementPreferenceEnum;\n    /**\n     * The vanity URL of this race on Strava.\n     */\n    url?: string;\n    /**\n     * The URL of this race's website.\n     */\n    websiteUrl?: string;\n}\nexport namespace RunningRace {\n    export type MeasurementPreferenceEnum = 'feet' | 'meters';\n    export const MeasurementPreferenceEnum = {\n        Feet: 'feet' as MeasurementPreferenceEnum,\n        Meters: 'meters' as MeasurementPreferenceEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { SegmentLeaderboardEntry } from './segmentLeaderboardEntry';\n\n\n/**\n * A\n */\nexport interface SegmentLeaderboard {\n    /**\n     * The total number of entries for this leaderboard\n     */\n    entryCount?: number;\n    /**\n     * Deprecated, use entry_count\n     */\n    effortCount?: number;\n    komType?: SegmentLeaderboard.KomTypeEnum;\n    entries?: Array<SegmentLeaderboardEntry>;\n}\nexport namespace SegmentLeaderboard {\n    export type KomTypeEnum = 'kom' | 'cr';\n    export const KomTypeEnum = {\n        Kom: 'kom' as KomTypeEnum,\n        Cr: 'cr' as KomTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface SmoothGradeStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: SmoothGradeStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: SmoothGradeStream.SeriesTypeEnum;\n    /**\n     * The sequence of grade values for this stream, as percents of a grade\n     */\n    data?: Array<number>;\n}\nexport namespace SmoothGradeStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface SmoothVelocityStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: SmoothVelocityStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: SmoothVelocityStream.SeriesTypeEnum;\n    /**\n     * The sequence of velocity values for this stream, in meters per second\n     */\n    data?: Array<number>;\n}\nexport namespace SmoothVelocityStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { MetaAthlete } from './metaAthlete';\n\n\nexport interface SummaryAthlete {\n    /**\n     * The unique identifier of the athlete\n     */\n    id?: number;\n    /**\n     * Resource state, indicates level of detail. Possible values: 1 -> \\\"meta\\\", 2 -> \\\"summary\\\", 3 -> \\\"detail\\\"\n     */\n    resourceState?: number;\n    /**\n     * The athlete's first name.\n     */\n    firstname?: string;\n    /**\n     * The athlete's last name.\n     */\n    lastname?: string;\n    /**\n     * URL to a 62x62 pixel profile picture.\n     */\n    profile_medium?: string;\n    /**\n     * URL to a 124x124 pixel profile picture.\n     */\n    profile?: string;\n    /**\n     * The athlete's city.\n     */\n    city?: string;\n    /**\n     * The athlete's state or geographical region.\n     */\n    state?: string;\n    /**\n     * The athlete's country.\n     */\n    country?: string;\n    /**\n     * The athlete's sex.\n     */\n    sex?: SummaryAthlete.SexEnum;\n    /**\n     * Whether the currently logged-in athlete follows this athlete.\n     */\n    friend?: SummaryAthlete.FriendEnum;\n    /**\n     * Whether this athlete follows the currently logged-in athlete.\n     */\n    follower?: SummaryAthlete.FollowerEnum;\n    /**\n     * Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.\n     */\n    premium?: boolean;\n    /**\n     * Whether the athlete has any Summit subscription.\n     */\n    summit?: boolean;\n    /**\n     * The time at which the athlete was created.\n     */\n    createdAt?: Date;\n    /**\n     * The time at which the athlete was last updated.\n     */\n    updatedAt?: Date;\n}\n\nexport class SummaryAthleteClass {\n    /**\n     * The unique identifier of the athlete\n     */\n    id?: number;\n    /**\n     * Resource state, indicates level of detail. Possible values: 1 -> \\\"meta\\\", 2 -> \\\"summary\\\", 3 -> \\\"detail\\\"\n     */\n    resourceState?: number;\n    /**\n     * The athlete's first name.\n     */\n    firstname?: string;\n    /**\n     * The athlete's last name.\n     */\n    lastname?: string;\n    /**\n     * URL to a 62x62 pixel profile picture.\n     */\n    profile_medium?: string;\n    /**\n     * URL to a 124x124 pixel profile picture.\n     */\n    profile?: string;\n    /**\n     * The athlete's city.\n     */\n    city?: string;\n    /**\n     * The athlete's state or geographical region.\n     */\n    state?: string;\n    /**\n     * The athlete's country.\n     */\n    country?: string;\n    /**\n     * The athlete's sex.\n     */\n    sex?: SummaryAthlete.SexEnum;\n    /**\n     * Whether the currently logged-in athlete follows this athlete.\n     */\n    friend?: SummaryAthlete.FriendEnum;\n    /**\n     * Whether this athlete follows the currently logged-in athlete.\n     */\n    follower?: SummaryAthlete.FollowerEnum;\n    /**\n     * Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.\n     */\n    premium?: boolean;\n    /**\n     * Whether the athlete has any Summit subscription.\n     */\n    summit?: boolean;\n    /**\n     * The time at which the athlete was created.\n     */\n    createdAt?: Date;\n    /**\n     * The time at which the athlete was last updated.\n     */\n    updatedAt?: Date;\n}\nexport namespace SummaryAthlete {\n    export type SexEnum = 'M' | 'F';\n    export const SexEnum = {\n        M: 'M' as SexEnum,\n        F: 'F' as SexEnum\n    }\n    export type FriendEnum = 'pending' | 'accepted' | 'blocked';\n    export const FriendEnum = {\n        Pending: 'pending' as FriendEnum,\n        Accepted: 'accepted' as FriendEnum,\n        Blocked: 'blocked' as FriendEnum\n    }\n    export type FollowerEnum = 'pending' | 'accepted' | 'blocked';\n    export const FollowerEnum = {\n        Pending: 'pending' as FollowerEnum,\n        Accepted: 'accepted' as FollowerEnum,\n        Blocked: 'blocked' as FollowerEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { MetaClub } from './metaClub';\n\n\nexport interface SummaryClub {\n    /**\n     * The club's unique identifier.\n     */\n    id?: number;\n    /**\n     * Resource state, indicates level of detail. Possible values: 1 -> \\\"meta\\\", 2 -> \\\"summary\\\", 3 -> \\\"detail\\\"\n     */\n    resourceState?: number;\n    /**\n     * The club's name.\n     */\n    name?: string;\n    /**\n     * URL to a 60x60 pixel profile picture.\n     */\n    profileMedium?: string;\n    /**\n     * URL to a ~1185x580 pixel cover photo.\n     */\n    coverPhoto?: string;\n    /**\n     * URL to a ~360x176  pixel cover photo.\n     */\n    coverPhotoSmall?: string;\n    sportType?: SummaryClub.SportTypeEnum;\n    /**\n     * The club's city.\n     */\n    city?: string;\n    /**\n     * The club's state or geographical region.\n     */\n    state?: string;\n    /**\n     * The club's country.\n     */\n    country?: string;\n    /**\n     * Whether the club is private.\n     */\n    _private?: boolean;\n    /**\n     * The club's member count.\n     */\n    memberCount?: number;\n    /**\n     * Whether the club is featured or not.\n     */\n    featured?: boolean;\n    /**\n     * Whether the club is verified or not.\n     */\n    verified?: boolean;\n    /**\n     * The club's vanity URL.\n     */\n    url?: string;\n}\nexport namespace SummaryClub {\n    export type SportTypeEnum = 'cycling' | 'running' | 'triathlon' | 'other';\n    export const SportTypeEnum = {\n        Cycling: 'cycling' as SportTypeEnum,\n        Running: 'running' as SportTypeEnum,\n        Triathlon: 'triathlon' as SportTypeEnum,\n        Other: 'other' as SportTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { LatLng } from './latLng';\nimport { SummarySegmentEffort } from './summarySegmentEffort';\n\n\nexport interface SummarySegment {\n    /**\n     * The unique identifier of this segment\n     */\n    id?: number;\n    /**\n     * The name of this segment\n     */\n    name?: string;\n    activityType?: SummarySegment.ActivityTypeEnum;\n    /**\n     * The segment's distance, in meters\n     */\n    distance?: number;\n    /**\n     * The segment's average grade, in percents\n     */\n    averageGrade?: number;\n    /**\n     * The segments's maximum grade, in percents\n     */\n    maximumGrade?: number;\n    /**\n     * The segments's highest elevation, in meters\n     */\n    elevationHigh?: number;\n    /**\n     * The segments's lowest elevation, in meters\n     */\n    elevationLow?: number;\n    startLatlng?: LatLng;\n    endLatlng?: LatLng;\n    /**\n     * The category of the climb\n     */\n    climbCategory?: number;\n    /**\n     * The segments's city.\n     */\n    city?: string;\n    /**\n     * The segments's state or geographical region.\n     */\n    state?: string;\n    /**\n     * The segment's country.\n     */\n    country?: string;\n    /**\n     * Whether this segment is private.\n     */\n    _private?: boolean;\n    athletePrEffort?: SummarySegmentEffort;\n}\nexport namespace SummarySegment {\n    export type ActivityTypeEnum = 'Ride' | 'Run';\n    export const ActivityTypeEnum = {\n        Ride: 'Ride' as ActivityTypeEnum,\n        Run: 'Run' as ActivityTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface TemperatureStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: TemperatureStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: TemperatureStream.SeriesTypeEnum;\n    /**\n     * The sequence of temperature values for this stream, in celsius degrees\n     */\n    data?: Array<number>;\n}\nexport namespace TemperatureStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","/**\n * Strava API v3\n * Strava API\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { BaseStream } from './baseStream';\n\n\nexport interface TimeStream {\n    /**\n     * The number of data points in this stream\n     */\n    originalSize?: number;\n    /**\n     * The level of detail (sampling) in which this stream was returned\n     */\n    resolution?: TimeStream.ResolutionEnum;\n    /**\n     * The base series used in the case the stream was downsampled\n     */\n    seriesType?: TimeStream.SeriesTypeEnum;\n    /**\n     * The sequence of time values for this stream, in seconds\n     */\n    data?: Array<number>;\n}\nexport namespace TimeStream {\n    export type ResolutionEnum = 'low' | 'medium' | 'high';\n    export const ResolutionEnum = {\n        Low: 'low' as ResolutionEnum,\n        Medium: 'medium' as ResolutionEnum,\n        High: 'high' as ResolutionEnum\n    }\n    export type SeriesTypeEnum = 'distance' | 'time';\n    export const SeriesTypeEnum = {\n        Distance: 'distance' as SeriesTypeEnum,\n        Time: 'time' as SeriesTypeEnum\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n// Components\nimport { DashboardComponent } from '../components/dashboard/dashboard.component'\nimport { ActivitiesListComponent } from '../components/activities-list/activities-list.component'\n\nconst routes: Routes = [     \n  { path: 'activitiesList', component : ActivitiesListComponent }, \n  { path: 'dashboard', component : DashboardComponent }, \n  { path: '', component : DashboardComponent },\n  { path : '**', redirectTo : '/' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {NgModule} from '@angular/core';\nimport {\n  MatAutocompleteModule,\n  MatBadgeModule,\n  MatBottomSheetModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatStepperModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatTreeModule,\n} from '@angular/material';\n\n@NgModule({\n  exports: [\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    ScrollingModule,\n  ]\n})\nexport class materialModule{}","import { Injectable } from '@angular/core';\nimport { SummaryActivity, DetailedActivity } from '../interfacesStrava/models';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { UrlsStrava } from '../configuration/urlsStrava';\nimport { Oauth2Service } from './oauth2.service';\nimport { Constants } from '../configuration/constants';\nimport { lastActivityInterface, lastActivityClass } from '../classes/lastActivityPreview';\nimport { TimeMethods } from '../configuration/timeMethods';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivitiesService {\n\n  constructor(\n    private http : HttpClient,\n    private oauthService : Oauth2Service\n  ) { }\n\n  // Renvoie la dernière activité\n  getLastActivity():Observable<lastActivityInterface>{\n    return new Observable<lastActivityInterface>(observer=>{\n      this.oauthService.getAccessToken().subscribe(p_accessToken=>{\n        if (p_accessToken){\n          let headers : HttpHeaders = new HttpHeaders()\n            .set(Constants.HEADER_AUTHORIZATION, Constants.BASE_TOKEN + p_accessToken)\n          this.getCompleteActivitiesList().subscribe(p_list =>{\n            if (p_list){\n              let id = p_list[0]['id']\n              this.http.get(UrlsStrava.URL_ACTIVITY+id,{headers: headers}).subscribe(data=>{\n                if (data){\n                  let returnValue: lastActivityInterface = new lastActivityClass();\n                  let p_activity = data as DetailedActivity;\n                  returnValue.activityId     = p_activity.id;\n                  returnValue.activityName   = p_activity.name;\n                  returnValue.startDate      = p_activity.start_date_local;\n                  returnValue.map            = p_activity.map;\n                  returnValue.duration       = TimeMethods.convertSecondsInHours(p_activity.moving_time);                  \n                  returnValue.distance       = parseFloat((p_activity.distance/1000).toFixed(3));\n                  returnValue.calories       = p_activity.calories;\n                  returnValue.startLongitude = p_activity.start_latlng;\n                  returnValue.averageSpeed   = TimeMethods.convertSecondsInMinutes(\n                    parseInt(\n                      ((p_activity.moving_time/(p_activity.distance/1000))).toString()\n                    )\n                  );\n                  observer.next(returnValue);\n                }\n              })\n            }\n          })\n        }else{\n          console.error(`Token d'accès non obtenu`)\n        }\n      })\n    })\n  }\n\n  // Renvoie la liste complète des activités du compte\n  getCompleteActivitiesList():Observable<SummaryActivity[]>{\n    return new Observable<SummaryActivity[]>(observer=>{\n      this.oauthService.getAccessToken().subscribe(p_accessToken=>{\n        if (p_accessToken){\n          this.http.get(UrlsStrava.URL_ACTIVITIES_LIST, {headers: {'Authorization':'Bearer '+p_accessToken}})\n            .subscribe(p_activtiesSummary=>{\n              observer.next(<SummaryActivity[]>p_activtiesSummary);\n            })\n        }else{\n          console.error('Erreur dans la méthode getCompleteActivitiesList du service activities');\n        }\n      })\n    })\n  }\n\n  // Renvoie la liste des activités du compte couvrant une période donnée\n  getPeriodActivitiesList(p_startPeriod, p_endPeriod):Observable<SummaryActivity[]>{\n    return new Observable<SummaryActivity[]>(observer=>{\n      // Si on a les périodes\n      if (p_startPeriod && p_endPeriod){  \n        // Récup du token\n        this.oauthService.getAccessToken().subscribe(p_accessToken=>{        \n            // Construction des options de la requète\n          let options = {\n            params: new HttpParams()\n              .set('before',p_startPeriod)\n              .set('after',p_endPeriod)\n              .set('per_page','200'), \n            headers: new HttpHeaders()\n              .set(Constants.HEADER_AUTHORIZATION, Constants.BASE_TOKEN + p_accessToken)\n          } \n          // Exécution de la requète HTTP\n          this.http.get(UrlsStrava.URL_ACTIVITIES_LIST, options).subscribe((data: SummaryActivity[])=>{\n            observer.next(data);\n          },\n          p_error=>{\n            console.error(`Erreur dans la récupération des activités de la période donnée.`)\n          })\n        })  \n      }else{\n        // Il manque une ou plusieurs périodes\n        if (p_startPeriod)\n          console.error(`Période de fin manquante`)\n        else{\n          if (p_endPeriod)\n            console.error(`Période de début manquante`)\n          else  \n            console.error(`Aucune période reçue`)\n        }\n        return null;\n      }\n    })    \n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DetailedAthlete } from '../interfacesStrava/detailedAthlete'\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Oauth2Service } from './oauth2.service';\nimport { UrlsStrava } from '../configuration/urlsStrava';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AthletesService {\n\n  constructor(\n    private http: HttpClient,\n    private oauthService : Oauth2Service\n  ) { }\n\n  getLoggedInAthlete():Observable<DetailedAthlete>{\n\n    return new Observable<DetailedAthlete>(observer=>{\n      // Récupérer le token d'accès\n      this.oauthService.getAccessToken().subscribe(p_access_token=>{\n        // Prépare le header contenant le token\n        this.http.get(UrlsStrava.URL_LOGGED_ATHLETE, {headers: {'Authorization': `Bearer `+p_access_token}}).subscribe(p_athlete=>{\n          observer.next(p_athlete);\n        });\n      })\n    })    \n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Configuration } from '../classes/configStrava';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { UtilsMethods } from '../configuration/utils';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { UrlsStrava } from '../configuration/urlsStrava'\nimport { SummaryAthlete } from '../interfacesStrava/models';\nimport { Constants } from '../configuration/constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Oauth2Service { \n\n  // Subject permettant de savoir si l'on est connecté ou non\n  public isConnectedSubject : BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public userConnectedSubject : BehaviorSubject<SummaryAthlete> = new BehaviorSubject<SummaryAthlete>(null);\n\n  constructor(\n    private http         : HttpClient,\n    private configuration: Configuration  // Configuration de la connexion\n  ) {\n   }\n\n  // lance la procédure d'authentification\n  authenticate(){\n\n    // Ouvre une nouvelle fenêtre pour obtenir les autorisations\n    window.open(`${UrlsStrava.URL_AUTHORIZE}?client_id=${this.configuration.client_id}&redirect_uri=${this.configuration.redirect_uri}&approval_prompt=${this.configuration.approval_prompt}&response_type=${this.configuration.response_type}&scope=${this.configuration.scope}`)\n    \n  }\n\n  // Révoque les droits de l'application sur le compte de l'athlète\n  revokAccountAccess():Observable<boolean>{\n    return new Observable<boolean>(observer=>{\n      this.getAccessToken().subscribe(p_accessToken=>{\n        let headers : HttpHeaders = new HttpHeaders()\n            .set(Constants.HEADER_AUTHORIZATION, Constants.BASE_TOKEN + p_accessToken)\n        this.http.post(UrlsStrava.URL_DEAUTHORIZE,null, { headers: headers }).subscribe(p_returnValue=>{\n          if (p_returnValue){\n            localStorage.clear();\n            this.isConnectedSubject.next(false);\n            this.userConnectedSubject.next(null);\n            console.log('revokAccountAcces OK')\n            observer.next(true)\n          }\n        })\n      })\n    })\n  }\n\n  // Récupère un token une fois authentifié\n  obtainAccessToken():Observable<Configuration>{ \n    return new Observable<Configuration>(observer=>{ \n      this.http.post(UrlsStrava.URL_TOKEN, this.configuration).subscribe(data=>{\n        this.configuration.accessToken=data['access_token'];\n        this.configuration.refresh_token=data['refresh_token'];\n        this.configuration.expires_at=data['expires_at'];\n        this.configuration.saveConfigToLocalStorage();\n        this.isConnectedSubject.next(true); \n        observer.next(this.configuration);\n      }, error=>{\n        console.log(`une erreur est survenue lors de l'obtention des tokens :`)\n        console.log(error)  \n      })    \n    });\n  }\n\n  // Récupère un nouveau token en utilisant le refresh token\n  refreshAccessToken():Observable<Configuration>{\n    \n    return new Observable<Configuration>(observer=>{\n      this.configuration.grant_type='refresh_token';\n      this.http.post(UrlsStrava.URL_TOKEN, this.configuration).subscribe(data=>{\n        this.configuration.accessToken=data['access_token'];\n        this.configuration.refresh_token=data['refresh_token'];\n        this.configuration.expires_at=data['expires_at'];\n        console.log('nouveau token recu : '+this.configuration.accessToken)\n        this.isConnectedSubject.next(true);\n        this.configuration.saveConfigToLocalStorage();\n        observer.next(this.configuration)\n      })\n    })\n  }\n\n  // Gère les tokens\n  manageTokens():Observable<Configuration>{  \n    \n    return new Observable<Configuration>(observer=>{\n      if (this.configuration.accessToken){\n        // On a un token d'accès\n        if (UtilsMethods.isAccessTokenExpired(this.configuration.expires_at)){\n          // Le token a expiré\n          console.log('token présent mais expiré')\n          this.refreshAccessToken().subscribe(returnConfig=>{\n            this.isConnectedSubject.next(true);\n            observer.next(returnConfig)\n          });\n        }else{\n          // Access token toujours valide\n          this.isConnectedSubject.next(true);\n          observer.next(this.configuration)\n        }\n      }else{\n        // Si pas de token d'accès\n        if (this.configuration.refresh_token){\n          // On a un refresh token\n          this.refreshAccessToken().subscribe(returnConfig=>{\n            this.isConnectedSubject.next(true);\n            observer.next(returnConfig)\n          });\n        }        \n      }\n    })\n  }\n\n  // Envoie ou récupère le token accès\n  getAccessToken():Observable<string>{\n\n    return new Observable<any>(observer=>{\n      if (this.configuration.accessToken && !UtilsMethods.isAccessTokenExpired(this.configuration.expires_at)){\n        observer.next(this.configuration.accessToken);\n      }else{\n        this.manageTokens().subscribe(returnConfig=>{\n          if (returnConfig){\n            this.configuration = returnConfig;\n            observer.next(this.configuration.accessToken);\n          }\n        })  \n      }\n    })\n  }\n\n  // Récupère la configuration contenue dans le service\n  getConfiguration():Configuration{\n    return this.configuration;\n  }\n\n  // Affecte une configuration et la sauvegarde\n  setConfiguration(p_config: Configuration){\n    this.configuration = p_config;\n    this.configuration.saveConfigToLocalStorage();\n  }\n\n  // Affecte le code recu dans la config\n  setCode(p_code: string){\n    this.configuration.code = p_code;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}